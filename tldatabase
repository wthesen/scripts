# Copyright (c) 2023 SLB
# SLB Confidential

# /!\ WARNING: This file has been generated by tl_module_gen.
# /!\ ANY CHANGE TO THIS FILE WILL BE ERASED !!!
# /!\ See PythonDevLib/tl_module_gen for more informations.

import remote_techlog as _rt


def _client_service():
    """Returns the client service, or raise an error.
    """

    if _rt._client_service:
        return _rt._client_service
    raise RuntimeError("Not connected to Techlog.")


import tl.legacy.utils as _lutils


def _currentPythonContext():
    import __main__
    return getattr(__main__, "__tl_python_context__", "Techlog")


def _raiseIfPyWE():
    if _currentPythonContext() in ("PyWE", "PyWERelaxed"):
        raise Exception("This binding is not available from PyWE.")


def _raiseIfPyWERelaxed():
    if _currentPythonContext() == "PyWE":
        raise Exception("This binding is not available from PyWE.")

    if _currentPythonContext() == "PyWERelaxed":
        import warnings
        warnings.warn("Calling this binding from PyWE is not recommended", Warning)


DataError = ValueError


class TCacheVarData(object):
    """
    Private unsupported class. For internal use only. API can change without warning. Use at your own risk
    """

    def __reduce__(self):
        """Used by pickle to retrieve the object from a ref_id.
        """
        from remote_techlog.core.remote_ref import _unwrap_reference
        return (
            _unwrap_reference,
            (self._ref._id,),
        )

    def __init__(self, ref, wellName, datasetName, variableName, projectKey):
        """
        __init__()
    
        Initialize self.  See help(type(self)) for accurate signature.
        """
        import tl as _tl
        self._ref = ref
        self._wellName = wellName
        self._datasetName = datasetName
        self._variableName = variableName
        self._variable = (
            _tl.entity._get_project_legacy(projectKey)
            .get_entity(wellName, datasetName, variableName)
            .with_mode('rw')
        )


    @_lutils.return_if_exception(False)
    def arrayPtrGet(self, i: int, size: int=1) -> list:
        """
        arrayPtrGet(row: int, size: int=1) -> list
    
        Private function for internal use only.
        Get the cache values
    
        Args:
            row (int): i (line)
            size (int): Optional; size (number of lines)
    
        Returns:
            list: the list of list of float (list of dimensions and then list of values per dimension)
        """

        import tl._tl_client as _tl_client

        _raiseIfPyWE()

        start = i
        count = min(size, self.referenceSize() - start)

        rows, cols, format, raw_data = self._variable._get_chunk(
            start,
            start + count,
            ignore_incompatible_units = True,
        )

        return _tl_client.decode_data(rows, cols, format, raw_data, transpose=False)


    @_lutils.return_if_exception(False)
    def arrayPtrSet(self, row: int, values: list, size: int=1) -> bool:
        """
        arrayPtrSet(row: int, values: list, size: int=1) -> bool
    
        Private function for internal use only.
        Set the cache values
    
        Args:
            row (int): row index
            values (list): the list of list of float (list of dimensions and then list of values per dimension)
            size (int): Optional; size (number of lines)
    
        Returns:
            bool: operation exit status
        """

        import tl._tl_client as _tl_client

        _raiseIfPyWE()

        if not values:
            return False

        start = row
        count = min(size, self.referenceSize() - start)

        type = self._variable.get_data_format()
        column_count, type, data = _tl_client.encode_data(
            values, count, type, type, False, transpose=False
        )

        self._variable._set_chunk(
            data,
            start,
            start + count,
            ignore_incompatible_units = True,
        )

        return True


    _columnCount_id = None
    def columnCount(self, *args, **kwargs):
        """
        columnCount() -> int
    
        Private function for internal use only.
        Get the cache column count
    
        Returns:
            int: the column count
        """
        if TCacheVarData._columnCount_id is None:
            TCacheVarData._columnCount_id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', 'columnCount'))
        return _client_service().call(TCacheVarData._columnCount_id, self._ref, *args, **kwargs)


    _columnCountChange_id = None
    def columnCountChange(self, *args, **kwargs):
        """
        columnCountChange(count: int) -> bool
    
        Private function for internal use only.
        Set the cache column count
    
        Args:
            count (int): new column count
    
        Returns:
            bool: operation exit status
        """
        if TCacheVarData._columnCountChange_id is None:
            TCacheVarData._columnCountChange_id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', 'columnCountChange'))
        return _client_service().call(TCacheVarData._columnCountChange_id, self._ref, *args, **kwargs)


    _familyNameChange_id = None
    def familyNameChange(self, *args, **kwargs):
        """
        familyNameChange(family: str) -> bool
    
        Private function for internal use only.
        Set the cache family
    
        Args:
            family (str): family
    
        Returns:
            bool: operation exit status
        """
        if TCacheVarData._familyNameChange_id is None:
            TCacheVarData._familyNameChange_id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', 'familyNameChange'))
        return _client_service().call(TCacheVarData._familyNameChange_id, self._ref, *args, **kwargs)


    _groupNameChange_id = None
    def groupNameChange(self, *args, **kwargs):
        """
        groupNameChange(group: str) -> bool
    
        Private function for internal use only.
        Set the cache group
    
        Args:
            group (str): group
    
        Returns:
            bool: operation exit status
        """
        if TCacheVarData._groupNameChange_id is None:
            TCacheVarData._groupNameChange_id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', 'groupNameChange'))
        return _client_service().call(TCacheVarData._groupNameChange_id, self._ref, *args, **kwargs)


    _referenceSize_id = None
    def referenceSize(self, *args, **kwargs):
        """
        referenceSize() -> int
    
        Private function for internal use only.
        Get the cache reference size
    
        Returns:
            int: the reference size
        """
        if TCacheVarData._referenceSize_id is None:
            TCacheVarData._referenceSize_id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', 'referenceSize'))
        return _client_service().call(TCacheVarData._referenceSize_id, self._ref, *args, **kwargs)


    _unitNameChange_id = None
    def unitNameChange(self, *args, **kwargs):
        """
        unitNameChange(unit: str) -> bool
    
        Private function for internal use only.
        Set the cache unit
    
        Args:
            unit (str): unit
    
        Returns:
            bool: operation exit status
        """
        if TCacheVarData._unitNameChange_id is None:
            TCacheVarData._unitNameChange_id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', 'unitNameChange'))
        return _client_service().call(TCacheVarData._unitNameChange_id, self._ref, *args, **kwargs)


    ___repr___id = None
    def __repr__(self, *args, **kwargs):
        """"""
        if TCacheVarData.___repr___id is None:
            TCacheVarData.___repr___id = _client_service().register_static_object(('TechlogDatabase', 'TCacheVarData', '__repr__'))
        return _client_service().call(TCacheVarData.___repr___id, self._ref, *args, **kwargs)


___awiClean_id = None
def __awiClean(*args, **kwargs):
    """
    __awiClean() -> bool
    
    Closes all open windows in the current workspace and cleans the parameter manager
    
    Returns:
        bool: operation exit status
    """
    global ___awiClean_id
    if ___awiClean_id is None:
        ___awiClean_id = _client_service().register_static_object(('TechlogDatabase', '__awiClean'))
    return _client_service().call(___awiClean_id, *args, **kwargs)


___checkOut_id = None
def __checkOut(*args, **kwargs):
    """
    __checkOut(seatName: str) -> bool
    
    Checkout license
    
    Args:
        seatName (str): license to checkout
    
    Returns:
        bool: operation exit status
    """
    global ___checkOut_id
    if ___checkOut_id is None:
        ___checkOut_id = _client_service().register_static_object(('TechlogDatabase', '__checkOut'))
    return _client_service().call(___checkOut_id, *args, **kwargs)


___connectProjectBrowser_id = None
def __connectProjectBrowser(*args, **kwargs):
    """
    __connectProjectBrowser()
    
    Unlock the Project browser UI
    """
    global ___connectProjectBrowser_id
    if ___connectProjectBrowser_id is None:
        ___connectProjectBrowser_id = _client_service().register_static_object(('TechlogDatabase', '__connectProjectBrowser'))
    return _client_service().call(___connectProjectBrowser_id, *args, **kwargs)


___crtBreak_id = None
def __crtBreak(*args, **kwargs):
    """
    __crtBreak()
    
    Break.
    """
    global ___crtBreak_id
    if ___crtBreak_id is None:
        ___crtBreak_id = _client_service().register_static_object(('TechlogDatabase', '__crtBreak'))
    return _client_service().call(___crtBreak_id, *args, **kwargs)


___disconnectProjectBrowser_id = None
def __disconnectProjectBrowser(*args, **kwargs):
    """
    __disconnectProjectBrowser()
    
    Lock the Project browser UI
    """
    global ___disconnectProjectBrowser_id
    if ___disconnectProjectBrowser_id is None:
        ___disconnectProjectBrowser_id = _client_service().register_static_object(('TechlogDatabase', '__disconnectProjectBrowser'))
    return _client_service().call(___disconnectProjectBrowser_id, *args, **kwargs)


___freeMemory_id = None
def __freeMemory(*args, **kwargs):
    """
    __freeMemory() -> bool
    
    Clean memory
    
    Returns:
        bool: True if something has been cleaned, False otherwise
    """
    global ___freeMemory_id
    if ___freeMemory_id is None:
        ___freeMemory_id = _client_service().register_static_object(('TechlogDatabase', '__freeMemory'))
    return _client_service().call(___freeMemory_id, *args, **kwargs)


___getBHA_id = None
def __getBHA(*args, **kwargs):
    """
    __getBHA(wellName: str, datasetName: str) -> bool
    
    Get BHA
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        bool: BHA exists in the project
    """
    global ___getBHA_id
    if ___getBHA_id is None:
        ___getBHA_id = _client_service().register_static_object(('TechlogDatabase', '__getBHA'))
    return _client_service().call(___getBHA_id, *args, **kwargs)


___moduleLoad_id = None
def __moduleLoad(*args, **kwargs):
    """
    __moduleLoad(module: str) -> bool
    
    Load the module
    
    Args:
        module (str): module name to load
    
    Returns:
        bool: operation exit status
    """
    global ___moduleLoad_id
    if ___moduleLoad_id is None:
        ___moduleLoad_id = _client_service().register_static_object(('TechlogDatabase', '__moduleLoad'))
    return _client_service().call(___moduleLoad_id, *args, **kwargs)


___moduleUnload_id = None
def __moduleUnload(*args, **kwargs):
    """
    __moduleUnload(module: str) -> bool
    
    Unload the module
    
    Args:
        module (str): module name to unload
    
    Returns:
        bool: operation exit status
    """
    global ___moduleUnload_id
    if ___moduleUnload_id is None:
        ___moduleUnload_id = _client_service().register_static_object(('TechlogDatabase', '__moduleUnload'))
    return _client_service().call(___moduleUnload_id, *args, **kwargs)


___parameterPropagate_id = None
def __parameterPropagate(*args, **kwargs):
    """
    __parameterPropagate(paramId: int, level: int, levelFileName: str, value: str, unit: str) -> bool
    
    Propagate a value of parameter of project or well or zone
    
    Args:
        paramId (int): parameter which value will be changed
        level (int): level of the parameter to change: {0=project, 1=zone, 2=well}
        levelFileName (str): fileName of the parameter which value will be changed
        value (str): the parameter will receive the converted value
        unit (str): the value which will be propagated
    
    Returns:
        bool: operation exit status
    """
    global ___parameterPropagate_id
    if ___parameterPropagate_id is None:
        ___parameterPropagate_id = _client_service().register_static_object(('TechlogDatabase', '__parameterPropagate'))
    return _client_service().call(___parameterPropagate_id, *args, **kwargs)


___parameterWorkflowPropagate_id = None
def __parameterWorkflowPropagate(*args, **kwargs):
    """
    __parameterWorkflowPropagate(paramId: int, fileName: str, listFileName: list=[]) -> bool
    
    Propagate a value of parameter to workflow parameter
    
    Args:
        paramId (int): parameter id which value will be propagated
        fileName (str): parameters' fileName on which the value will be propagated
        listFileName (list): Optional; file name list
    
    Returns:
        bool: operation exit status
    """
    global ___parameterWorkflowPropagate_id
    if ___parameterWorkflowPropagate_id is None:
        ___parameterWorkflowPropagate_id = _client_service().register_static_object(('TechlogDatabase', '__parameterWorkflowPropagate'))
    return _client_service().call(___parameterWorkflowPropagate_id, *args, **kwargs)


___projectClean_id = None
def __projectClean(*args, **kwargs):
    """
    __projectClean(refresh: bool=False) -> bool
    
    Delete all wells and objects from the project
    
    Args:
        refresh (bool): Optional; refresh the project browser
    
    Returns:
        bool: operation exit status
    """
    global ___projectClean_id
    if ___projectClean_id is None:
        ___projectClean_id = _client_service().register_static_object(('TechlogDatabase', '__projectClean'))
    return _client_service().call(___projectClean_id, *args, **kwargs)


___projectSave_id = None
def __projectSave(*args, **kwargs):
    """
    __projectSave() -> bool
    
    Save the current project
    
    Returns:
        bool: operation save status
    """
    global ___projectSave_id
    if ___projectSave_id is None:
        ___projectSave_id = _client_service().register_static_object(('TechlogDatabase', '__projectSave'))
    return _client_service().call(___projectSave_id, *args, **kwargs)


___seatExists_id = None
def __seatExists(*args, **kwargs):
    """
    __seatExists(seatName: str) -> bool
    
    Check if the license has been checked out
    
    Args:
        seatName (str): license to check
    
    Returns:
        bool: is seat checked out?
    """
    global ___seatExists_id
    if ___seatExists_id is None:
        ___seatExists_id = _client_service().register_static_object(('TechlogDatabase', '__seatExists'))
    return _client_service().call(___seatExists_id, *args, **kwargs)


_variableCacheCreate_id = None
def __variableCacheCreate(wellName, datasetName, variableName, mode,
        dimension=1, useTemporaryCache=False, format=None, projectKey=None):
    """
    __variableCacheCreate(wellName: str, datasetName: str, variableName: str, mode: str, dimension: int=1, useTemporaryCache: bool=False, format: str='auto', projectKey: str=None) -> PyCacheVarData
    
    <b>Private function for internal use only.</b>
    Create a variable cache. This method must not be called directly.
    Please use the CacheVarData object instead.
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        mode (str): 'r' (read), 'rw' (read/write) or 'wo' (write only)
        dimension (int): Optional; , optional: number of columns if creating an array
        useTemporaryCache (bool): Optional; , optional: True if using a temporary cache var data
        format (str): Optional; , optional: data format of the cache var data. Available formats: auto, float, double, string
        projectKey (str): Optional; , optional: database key for the cache
    
    Returns:
        PyCacheVarData: Cache object upon success, None upon failure
    """

    _raiseIfPyWE()

    global _variableCacheCreate_id
    if _variableCacheCreate_id is None:
        _variableCacheCreate_id = _client_service().register_static_object(('TechlogDatabase', '__variableCacheCreate'))

    ref = _client_service().call_ref(_variableCacheCreate_id,
        wellName, datasetName, variableName, mode,
        dimension, useTemporaryCache, format, projectKey
    )

    if _client_service().call(('operator', 'is_'), ref, None):
        return None

    return TCacheVarData(ref, wellName, datasetName, variableName, projectKey)


___variableCopyMetadata_id = None
def __variableCopyMetadata(*args, **kwargs):
    """
    __variableCopyMetadata(wellName: str, datasetName: str, input: str, output: str, projectKey: str=None) -> bool
    
    Copy the secondary index from one input variable into the output variable BHA
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        input (str): input variable name
        output (str): output variable name
        projectKey (str): Optional; , optional: database key for the cache
    
    Returns:
        bool: operation exit status
    """
    global ___variableCopyMetadata_id
    if ___variableCopyMetadata_id is None:
        ___variableCopyMetadata_id = _client_service().register_static_object(('TechlogDatabase', '__variableCopyMetadata'))
    return _client_service().call(___variableCopyMetadata_id, *args, **kwargs)


_addDataSetForAWI_id = None
def addDataSetForAWI(*args, **kwargs):
    """
    addDataSetForAWI(winID: int, wellName: str, datasetName: str, defaultParam: bool=False) -> bool
    
    Add dataset in AWI
    
    Args:
        winID (int): identifier of the widget.
        wellName (str): well name
        datasetName (str): dataset name
        defaultParam (bool): Optional; use default parameters values
    
    Returns:
        bool: operation exit status
    """
    global _addDataSetForAWI_id
    if _addDataSetForAWI_id is None:
        _addDataSetForAWI_id = _client_service().register_static_object(('TechlogDatabase', 'addDataSetForAWI'))
    return _client_service().call(_addDataSetForAWI_id, *args, **kwargs)


_aliasChangeFamily_id = None
def aliasChangeFamily(*args, **kwargs):
    """
    aliasChangeFamily(level: str, alias: str, family: str) -> bool
    
    Change the family of an alias
    
    Args:
        level (str): level = {'user', 'project', 'company'}
        alias (str): alias name
        family (str): New family name
    
    Returns:
        bool: operation exit status
    """
    global _aliasChangeFamily_id
    if _aliasChangeFamily_id is None:
        _aliasChangeFamily_id = _client_service().register_static_object(('TechlogDatabase', 'aliasChangeFamily'))
    return _client_service().call(_aliasChangeFamily_id, *args, **kwargs)


_aliasChangeName_id = None
def aliasChangeName(*args, **kwargs):
    """
    aliasChangeName(level: str, alias: str, name: str) -> bool
    
    Rename an alias
    
    Args:
        level (str): level = {'user', 'project', 'company'}
        alias (str): Old alias name
        name (str): New alias name
    
    Returns:
        bool: operation exit status
    """
    global _aliasChangeName_id
    if _aliasChangeName_id is None:
        _aliasChangeName_id = _client_service().register_static_object(('TechlogDatabase', 'aliasChangeName'))
    return _client_service().call(_aliasChangeName_id, *args, **kwargs)


_aliasChangeVariables_id = None
def aliasChangeVariables(*args, **kwargs):
    """
    aliasChangeVariables(level: str, alias: str, variables: list) -> bool
    
    Change the variables list of an alias
    
    Args:
        level (str): level = {'user', 'project', 'company'}
        alias (str): alias name
        variables (list): New list of variables
    
    Returns:
        bool: operation exit status
    """
    global _aliasChangeVariables_id
    if _aliasChangeVariables_id is None:
        _aliasChangeVariables_id = _client_service().register_static_object(('TechlogDatabase', 'aliasChangeVariables'))
    return _client_service().call(_aliasChangeVariables_id, *args, **kwargs)


_aliasCreate_id = None
def aliasCreate(*args, **kwargs):
    """
    aliasCreate(level: str, alias: str, familyName: str='', variables: list=[]) -> bool
    
    Create an alias
    
    Args:
        level (str): level = {'user', 'project', 'company'}
        alias (str): alias name
        familyName (str): Optional; family name
        variables (list): Optional; list of variables
    
    Returns:
        bool: operation exit status
    """
    global _aliasCreate_id
    if _aliasCreate_id is None:
        _aliasCreate_id = _client_service().register_static_object(('TechlogDatabase', 'aliasCreate'))
    return _client_service().call(_aliasCreate_id, *args, **kwargs)


_aliasDelete_id = None
def aliasDelete(*args, **kwargs):
    """
    aliasDelete(level: str, alias: str) -> bool
    
    Delete an alias
    
    Args:
        level (str): level = {'user', 'project', 'company'}
        alias (str): alias name
    
    Returns:
        bool: operation exit status
    """
    global _aliasDelete_id
    if _aliasDelete_id is None:
        _aliasDelete_id = _client_service().register_static_object(('TechlogDatabase', 'aliasDelete'))
    return _client_service().call(_aliasDelete_id, *args, **kwargs)


_aliasExists_id = None
def aliasExists(*args, **kwargs):
    """
    aliasExists(level: str, alias: str) -> bool
    
    Check if an alias exists
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
        alias (str): alias name
    
    Returns:
        bool: True if alias exists
    """
    global _aliasExists_id
    if _aliasExists_id is None:
        _aliasExists_id = _client_service().register_static_object(('TechlogDatabase', 'aliasExists'))
    return _client_service().call(_aliasExists_id, *args, **kwargs)


_aliasExport_id = None
def aliasExport(*args, **kwargs):
    """
    aliasExport(level: str, file: str) -> bool
    
    Export aliases to a CSV file
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
        file (str): csv destination file
    
    Returns:
        bool: operation exit status
    """
    global _aliasExport_id
    if _aliasExport_id is None:
        _aliasExport_id = _client_service().register_static_object(('TechlogDatabase', 'aliasExport'))
    return _client_service().call(_aliasExport_id, *args, **kwargs)


_aliasFamily_id = None
def aliasFamily(*args, **kwargs):
    """
    aliasFamily(level: str, alias: str) -> str
    
    Return the family of an alias
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
        alias (str): alias name
    
    Returns:
        str: family name
    """
    global _aliasFamily_id
    if _aliasFamily_id is None:
        _aliasFamily_id = _client_service().register_static_object(('TechlogDatabase', 'aliasFamily'))
    return _client_service().call(_aliasFamily_id, *args, **kwargs)


_aliasImport_id = None
def aliasImport(*args, **kwargs):
    """
    aliasImport(level: str, file: str) -> bool
    
    Import aliases from a CSV file
    
    Args:
        level (str): level = {'user', 'project', 'company'}
        file (str): csv source file
    
    Returns:
        bool: operation exit status
    """
    global _aliasImport_id
    if _aliasImport_id is None:
        _aliasImport_id = _client_service().register_static_object(('TechlogDatabase', 'aliasImport'))
    return _client_service().call(_aliasImport_id, *args, **kwargs)


_aliasIsActivated_id = None
def aliasIsActivated(*args, **kwargs):
    """
    aliasIsActivated(level: str) -> bool
    
    Is an alias level is activated or not
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
    
    Returns:
        bool: status of level
    """
    global _aliasIsActivated_id
    if _aliasIsActivated_id is None:
        _aliasIsActivated_id = _client_service().register_static_object(('TechlogDatabase', 'aliasIsActivated'))
    return _client_service().call(_aliasIsActivated_id, *args, **kwargs)


_aliasList_id = None
def aliasList(*args, **kwargs):
    """
    aliasList(level: str) -> list
    
    Return the list of aliases
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
    
    Returns:
        list: the list of aliases
    """
    global _aliasList_id
    if _aliasList_id is None:
        _aliasList_id = _client_service().register_static_object(('TechlogDatabase', 'aliasList'))
    return _client_service().call(_aliasList_id, *args, **kwargs)


_aliasSetActivated_id = None
def aliasSetActivated(*args, **kwargs):
    """
    aliasSetActivated(level: str, activated: bool) -> bool
    
    Activated or deactivated an alias level
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
        activated (bool): True for activate level
    
    Returns:
        bool: operation exit status
    """
    global _aliasSetActivated_id
    if _aliasSetActivated_id is None:
        _aliasSetActivated_id = _client_service().register_static_object(('TechlogDatabase', 'aliasSetActivated'))
    return _client_service().call(_aliasSetActivated_id, *args, **kwargs)


_aliasVariables_id = None
def aliasVariables(*args, **kwargs):
    """
    aliasVariables(level: str, alias: str) -> list
    
    Return the list of variables of an alias
    
    Args:
        level (str): level = {'user', 'project', 'company', 'techlog'}
        alias (str): alias name
    
    Returns:
        list: the list of variables
    """
    global _aliasVariables_id
    if _aliasVariables_id is None:
        _aliasVariables_id = _client_service().register_static_object(('TechlogDatabase', 'aliasVariables'))
    return _client_service().call(_aliasVariables_id, *args, **kwargs)


_appDb_id = None
def appDb():
    """
    appDb() -> Any
    
    Return the application database
    
    Returns:
        Any: pointer to database
    """
    global _appDb_id
    if _appDb_id is None:
        _appDb_id = _client_service().register_static_object(('TechlogDatabase', 'appDb'))
    return _client_service().call_ref(_appDb_id)


_arrayColumnNameList_id = None
def arrayColumnNameList(*args, **kwargs):
    """
    arrayColumnNameList(wellName: str, datasetName: str, arrayName: str) -> list
    
    Return the name list of the array columns
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        arrayName (str): array name
    
    Returns:
        list: column name list
    """
    global _arrayColumnNameList_id
    if _arrayColumnNameList_id is None:
        _arrayColumnNameList_id = _client_service().register_static_object(('TechlogDatabase', 'arrayColumnNameList'))
    return _client_service().call(_arrayColumnNameList_id, *args, **kwargs)


_arrayColumnNameListChange_id = None
def arrayColumnNameListChange(*args, **kwargs):
    """
    arrayColumnNameListChange(wellName: str, datasetName: str, arrayName: str, columnNameList: list) -> bool
    
    Modify the column name of the array
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        arrayName (str): array name
        columnNameList (list): column name list
    
    Returns:
        bool: result
    """
    global _arrayColumnNameListChange_id
    if _arrayColumnNameListChange_id is None:
        _arrayColumnNameListChange_id = _client_service().register_static_object(('TechlogDatabase', 'arrayColumnNameListChange'))
    return _client_service().call(_arrayColumnNameListChange_id, *args, **kwargs)


_arrayColumnSize_id = None
def arrayColumnSize(*args, **kwargs):
    """
    arrayColumnSize(wellName: str, datasetName: str, arrayName: str) -> int
    
    Return the column count of the array
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        arrayName (str): array name
    
    Returns:
        int: column count
    """
    global _arrayColumnSize_id
    if _arrayColumnSize_id is None:
        _arrayColumnSize_id = _client_service().register_static_object(('TechlogDatabase', 'arrayColumnSize'))
    return _client_service().call(_arrayColumnSize_id, *args, **kwargs)


_arrayInterpolate_id = None
def arrayInterpolate(*args, **kwargs):
    """
    arrayInterpolate(w: str, d: str, a: str) -> bool
    
    Fill the gaps of an array using linear interpolation
    
    Args:
        w (str): well name
        d (str): dataset name
        a (str): array name
    
    Returns:
        bool: result
    """
    global _arrayInterpolate_id
    if _arrayInterpolate_id is None:
        _arrayInterpolate_id = _client_service().register_static_object(('TechlogDatabase', 'arrayInterpolate'))
    return _client_service().call(_arrayInterpolate_id, *args, **kwargs)


_arrayInterpolateHorizontally_id = None
def arrayInterpolateHorizontally(*args, **kwargs):
    """
    arrayInterpolateHorizontally(w: str, d: str, a: str, suffix: str='_R') -> bool
    
    Fill the gaps of an array using linear interpolation horizontally
    
    Args:
        w (str): well name
        d (str): dataset name
        a (str): array name
        suffix (str): Optional; suffix to add to the output
    
    Returns:
        bool: Operation exit status
    """
    global _arrayInterpolateHorizontally_id
    if _arrayInterpolateHorizontally_id is None:
        _arrayInterpolateHorizontally_id = _client_service().register_static_object(('TechlogDatabase', 'arrayInterpolateHorizontally'))
    return _client_service().call(_arrayInterpolateHorizontally_id, *args, **kwargs)


@_lutils.return_if_exception(False)
def arraySave(wellName, datasetName, variableName, values, columnsize=0,
        showthewarning=False, family=None, unit=None, type="auto", allowvarioussize=False):
    """
    arraySave(wellName: str, datasetName: str, variableName: str, values: list, columnsize: int=0, showthewarning: bool=False, family: str='', unit: str='', type: str='auto') -> bool
    
    Save the array into the database
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): array name
        values (list): values list column oriented
        columnsize (int): Optional; unused
        showthewarning (bool): Optional; DEPRECATED: must be False
        family (str): Optional; family name. Set it to None to use family assignment rules
        unit (str): Optional; unit name
        type (str): Optional; 'auto', 'float'
    
    Returns:
        bool: operation exit status
    """

    _raiseIfPyWE()

    _lutils.save_variable(
        wellName, datasetName, variableName,
        family, unit, values,
        showthewarning, type, allowvarioussize
    )
    return True


# TODO: arrayTempSave


_arraySplit_id = None
def arraySplit(*args, **kwargs):
    """
    arraySplit(wellName: str, datasetName: str, arrayName: str, synchronous: bool=True) -> bool
    
    Split the array accordingly to the size of the last dimension
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        arrayName (str): array name
        synchronous (bool): Optional; synchronous
    
    Returns:
        bool: operation exit status
    """
    global _arraySplit_id
    if _arraySplit_id is None:
        _arraySplit_id = _client_service().register_static_object(('TechlogDatabase', 'arraySplit'))
    return _client_service().call(_arraySplit_id, *args, **kwargs)


_arraySplitFinished_id = None
def arraySplitFinished(*args, **kwargs):
    """
    arraySplitFinished() -> bool
    
    Split the array accordingly to the size of the last dimension
    
    Returns:
        bool: return True is all arraySplit tasks are finished
    """
    global _arraySplitFinished_id
    if _arraySplitFinished_id is None:
        _arraySplitFinished_id = _client_service().register_static_object(('TechlogDatabase', 'arraySplitFinished'))
    return _client_service().call(_arraySplitFinished_id, *args, **kwargs)


_arrayTempSave_id = None
def arrayTempSave(*args, **kwargs):
    """
    arrayTempSave(wellName: str, datasetName: str, arrayName: str, values: list, size: int, nbcolumn: int) -> bool
    
    Save as a temporary array (for internal use only)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        arrayName (str): array name
        values (list): values list
        size (int): array size
        nbcolumn (int): column count
    
    Returns:
        bool: operation exit status
    """
    global _arrayTempSave_id
    if _arrayTempSave_id is None:
        _arrayTempSave_id = _client_service().register_static_object(('TechlogDatabase', 'arrayTempSave'))
    return _client_service().call(_arrayTempSave_id, *args, **kwargs)


_associatedFamily_id = None
def associatedFamily(*args, **kwargs):
    """
    associatedFamily(variableName: str) -> str
    
    Return the default family for a given variable name
    
    Args:
        variableName (str): variable name
    
    Returns:
        str: The default family for the given variable name
    """
    global _associatedFamily_id
    if _associatedFamily_id is None:
        _associatedFamily_id = _client_service().register_static_object(('TechlogDatabase', 'associatedFamily'))
    return _client_service().call(_associatedFamily_id, *args, **kwargs)


_availableUnitSystems_id = None
def availableUnitSystems(*args, **kwargs):
    """
    availableUnitSystems() -> list
    
    Get the available unit systems
    
    Returns:
        list: list of available unit systems (Project\\MyUS1, Company\\MyUS2, ...)
    """
    global _availableUnitSystems_id
    if _availableUnitSystems_id is None:
        _availableUnitSystems_id = _client_service().register_static_object(('TechlogDatabase', 'availableUnitSystems'))
    return _client_service().call(_availableUnitSystems_id, *args, **kwargs)


_buildNumber_id = None
def buildNumber(*args, **kwargs):
    """
    buildNumber() -> str
    
    Return a string corresponding to the Techlog build number
    
    Returns:
        str: build number
    """
    global _buildNumber_id
    if _buildNumber_id is None:
        _buildNumber_id = _client_service().register_static_object(('TechlogDatabase', 'buildNumber'))
    return _client_service().call(_buildNumber_id, *args, **kwargs)


_compareFamily_id = None
def compareFamily(*args, **kwargs):
    """
    compareFamily(FamilyToGet: str, Family: str) -> bool
    
    Compare a family and a string
    
    Args:
        FamilyToGet (str): the family you want to get
        Family (str): expected family
    
    Returns:
        bool: operation exit status
    """
    global _compareFamily_id
    if _compareFamily_id is None:
        _compareFamily_id = _client_service().register_static_object(('TechlogDatabase', 'compareFamily'))
    return _client_service().call(_compareFamily_id, *args, **kwargs)


_computeTVD_id = None
def computeTVD(*args, **kwargs):
    """
    computeTVD(well: str, dataset: str, datasetOutputName: str, method: str='minimum curvature', elevation: float=0, elevationUnit: str='m', waterDepth: float=0, waterDepthUnit: str='m', totalDepth: float=0, totalDepthUnit: str='m', tiePointMethod: str='survey', tiePointTVD: float=0, tiePointMD: float=0, tiePointDepthUnit: str='m', tiePointX: float=0, tiePointY: float=0, offsetUnit: str='m', tiePointAZI: float=0, tiepointDEV: float=0, angleUnit: str='dega', startDepthMethod: str='first dip', startDepthValue: float=0, startDepthUnit: str='m', extendDipMethod: str='interpolate to 0', finalUnit: str='m', outputSamplingRateValue: float=0.1524, outputSamplingRateUnit: str='m', listOutputLogDescription: list=[], bSaveMode: bool=True, bOverwrite: bool=False, typeAzimuth: str='', extrapolationMethod: str='stop computation', projection: float=0, projectionUnit: str='m') -> str
    
    Computation of the TVD
    
    Args:
        well (str): well name
        dataset (str): dataset name
        datasetOutputName (str): output dataset name
        method (str): Optional; method: {'minimum curvature', 'radius of curvature', 'high tangential', 'low tangential', 'average tangential', 'balanced tangential'}
        elevation (float): Optional; elevation value
        elevationUnit (str): Optional; elevation unit
        waterDepth (float): Optional; water depth value
        waterDepthUnit (str): Optional; water depth unit
        totalDepth (float): Optional; total depth value
        totalDepthUnit (str): Optional; total depth unit
        tiePointMethod (str): Optional; tie point method: {'survey', 'custom'}
        tiePointTVD (float): Optional; tie point TVD value
        tiePointMD (float): Optional; tie point MD value
        tiePointDepthUnit (str): Optional; tie point depth unit
        tiePointX (float): Optional; tie point XOffset value
        tiePointY (float): Optional; tie point YOffset value
        offsetUnit (str): Optional; tie point offset unit
        tiePointAZI (float): Optional; tie point azimuth value
        tiepointDEV (float): Optional; tie point deviation value
        angleUnit (str): Optional; tie point angle unit
        startDepthMethod (str): Optional; method used to find the TVT/TST start depth: {'first dip', 'depth (MD)', 'depth (TVD)'}
        startDepthValue (float): Optional; TVT/TST start depth value of TVD or MD
        startDepthUnit (str): Optional; unit used for the TVT/TST start depth TVD or MD
        extendDipMethod (str): Optional; method used to extend the dips to the start depth: {'interpolate to 0', 'extrapolate'}
        finalUnit (str): Optional; dataset final unit
        outputSamplingRateValue (float): Optional; sampling rate value for the output dataset
        outputSamplingRateUnit (str): Optional; sampling rate unit for the output dataset
        listOutputLogDescription (list): Optional; description of output logs. Indices in the list: 0-TVD, 1-TVDSS, 2-XOFFSET, 3-YOFFSET, 4-TVDBML, 5-DL, 6-TVT, 7-TST, 8-THL, 9-BOREHOLE_DEVIATION, 10-BOREHOLE_AZIMUTH, 11-TVT_DELTA, 12-TST_DELTA
        bSaveMode (bool): Optional; save output variables
        bOverwrite (bool): Optional; overwrite output variables
        typeAzimuth (str): Optional; type of the reference azimuth (grid North or true North)
        extrapolationMethod (str): Optional; extrapolation method {'stop computation', 'continue the trend', 'hold angle'}
        projection (float): Optional; projection value for the extrapolation
        projectionUnit (str): Optional; projection unit
    
    Returns:
        str: the output dataset name
    """
    global _computeTVD_id
    if _computeTVD_id is None:
        _computeTVD_id = _client_service().register_static_object(('TechlogDatabase', 'computeTVD'))
    return _client_service().call(_computeTVD_id, *args, **kwargs)


_contactAdd_id = None
def contactAdd(*args, **kwargs):
    """
    contactAdd(ds: str, min: float, max: float, td: float, ty: str, unit: str, c: str='', d: str='', descr: str='', hz: str='', qual: str='', src: str='') -> int
    
    Add a contact
    
    Args:
        ds (str): dataset
        min (float): minimum
        max (float): maximum
        td (float): tvdss
        ty (str): contact type
        unit (str): unit
        c (str): Optional; creator
        d (str): Optional; date
        descr (str): Optional; description
        hz (str): Optional; hydraulic zone
        qual (str): Optional; qualifier
        src (str): Optional; source
    
    Returns:
        int: contact id
    """
    global _contactAdd_id
    if _contactAdd_id is None:
        _contactAdd_id = _client_service().register_static_object(('TechlogDatabase', 'contactAdd'))
    return _client_service().call(_contactAdd_id, *args, **kwargs)


_contactDelete_id = None
def contactDelete(*args, **kwargs):
    """
    contactDelete(dataset: str, contactId: int) -> bool
    
    Delete a contact
    
    Args:
        dataset (str): dataset
        contactId (int): contact id
    
    Returns:
        bool: operation exit status
    """
    global _contactDelete_id
    if _contactDelete_id is None:
        _contactDelete_id = _client_service().register_static_object(('TechlogDatabase', 'contactDelete'))
    return _client_service().call(_contactDelete_id, *args, **kwargs)


_contactGet_id = None
def contactGet(*args, **kwargs):
    """
    contactGet(dataset: str, contactId: int) -> dict
    
    Get a contact
    
    Args:
        dataset (str): dataset
        contactId (int): contact id
    
    Returns:
        dict: dictionary of parameters of the contact
    """
    global _contactGet_id
    if _contactGet_id is None:
        _contactGet_id = _client_service().register_static_object(('TechlogDatabase', 'contactGet'))
    return _client_service().call(_contactGet_id, *args, **kwargs)


_contactList_id = None
def contactList(*args, **kwargs):
    """
    contactList(dataset: str) -> list
    
    Return the list of contacts
    
    Args:
        dataset (str): dataset
    
    Returns:
        list: list of contact ids
    """
    global _contactList_id
    if _contactList_id is None:
        _contactList_id = _client_service().register_static_object(('TechlogDatabase', 'contactList'))
    return _client_service().call(_contactList_id, *args, **kwargs)


_contactSave_id = None
def contactSave(*args, **kwargs):
    """
    contactSave(dataset: str) -> bool
    
    Save the contacts
    
    Args:
        dataset (str): dataset
    
    Returns:
        bool: operation exit status
    """
    global _contactSave_id
    if _contactSave_id is None:
        _contactSave_id = _client_service().register_static_object(('TechlogDatabase', 'contactSave'))
    return _client_service().call(_contactSave_id, *args, **kwargs)


_convertCRSMagicNameToTextualRepresentation_id = None
def convertCRSMagicNameToTextualRepresentation(*args, **kwargs):
    """
    convertCRSMagicNameToTextualRepresentation(oldTextualRepresentation: str) -> str
    
    Convert a CRS magic name to its textual representation
    
    Args:
        oldTextualRepresentation (str): the CRS magic text
    
    Returns:
        str: the CRS textual representation
    """
    global _convertCRSMagicNameToTextualRepresentation_id
    if _convertCRSMagicNameToTextualRepresentation_id is None:
        _convertCRSMagicNameToTextualRepresentation_id = _client_service().register_static_object(('TechlogDatabase', 'convertCRSMagicNameToTextualRepresentation'))
    return _client_service().call(_convertCRSMagicNameToTextualRepresentation_id, *args, **kwargs)


_convertCRSToLL_id = None
def convertCRSToLL(*args, **kwargs):
    """
    convertCRSToLL(X: float, Y: float, datum: str, unit: str) -> float, float, str, str, str
    
    Convert projected coordinates (X and Y) to latitude and longitude
    
    Args:
        X (float):  X
        Y (float):  Y
        datum (str): projected datum name
        unit (str): unit of X and Y
    
    Returns:
        float, float, str, str, str: longitude, latitude, ProjCS's Well-Known Text, GeogCS's Well-Known Text, GeogCS name
    """
    global _convertCRSToLL_id
    if _convertCRSToLL_id is None:
        _convertCRSToLL_id = _client_service().register_static_object(('TechlogDatabase', 'convertCRSToLL'))
    return _client_service().call(_convertCRSToLL_id, *args, **kwargs)


_convertCRStoLL_id = None
def convertCRStoLL(*args, **kwargs):
    """
    convertCRStoLL(X: float, Y: float, datum: str, unit: str) -> float, float, str, str, str
    
    [Deprecated] Use convertCRSToLL instead.
    Convert projected coordinates (X and Y) to latitude and longitude
    
    Args:
        X (float):  X
        Y (float):  Y
        datum (str): projected datum name
        unit (str): unit of X and Y
    
    Returns:
        float, float, str, str, str: longitude, latitude, ProjCS's Well-Known Text, GeogCS's Well-Known Text, GeogCS name
    """
    global _convertCRStoLL_id
    if _convertCRStoLL_id is None:
        _convertCRStoLL_id = _client_service().register_static_object(('TechlogDatabase', 'convertCRStoLL'))
    return _client_service().call(_convertCRStoLL_id, *args, **kwargs)


_convertCoord_id = None
def convertCoord(*args, **kwargs):
    """
    convertCoord(longitude: float, latitude: float, datum_from: str, datum_to: str) -> float, float
    
    Convert a coordinate in one datum to an other
    
    Args:
        longitude (float): longitude in decimal degrees or X in meters
        latitude (float): latitude in decimal degrees or Y in meters
        datum_from (str): input datum name
        datum_to (str): output datum name
    
    Returns:
        float, float: X and Y or longitude and latitude
    """
    global _convertCoord_id
    if _convertCoord_id is None:
        _convertCoord_id = _client_service().register_static_object(('TechlogDatabase', 'convertCoord'))
    return _client_service().call(_convertCoord_id, *args, **kwargs)


_convertCoordDatum_id = None
def convertCoordDatum(*args, **kwargs):
    """
    convertCoordDatum(longitude: float, latitude: float, datum_from: str, datum_to: str, unit: str) -> float, float, float, float, str, str, str, str
    
    Convert longitude and latitude in one datum to an other projected datum
    
    Args:
        longitude (float): longitude in decimal degrees
        latitude (float): latitude in decimal degrees
        datum_from (str): input datum name
        datum_to (str): output projected datum name
        unit (str): unit of X and Y after conversion
    
    Returns:
        float, float, float, float, str, str, str, str: X, Y, longitude after datum transformation, latitude after datum transformation, Unit, ProjCS's Well-Known Text, GeogCS's Well-Known Text, GeogCS name
    """
    global _convertCoordDatum_id
    if _convertCoordDatum_id is None:
        _convertCoordDatum_id = _client_service().register_static_object(('TechlogDatabase', 'convertCoordDatum'))
    return _client_service().call(_convertCoordDatum_id, *args, **kwargs)


_convertLLToCRS_id = None
def convertLLToCRS(*args, **kwargs):
    """
    convertLLToCRS(longitude: float, latitude: float, datum: str, unit: str) -> float, float, str, str, str, str
    
    Convert latitude and longitude to projected coordinates (X and Y)
    
    Args:
        longitude (float): longitude in decimal degrees
        latitude (float): latitude in decimal degrees
        datum (str): projected datum name
        unit (str): unit of X and Y after conversion
    
    Returns:
        float, float, str, str, str, str: X, Y, Unit, ProjCS's Well-Known Text, GeogCS's Well-Known Text, GeogCS name
    """
    global _convertLLToCRS_id
    if _convertLLToCRS_id is None:
        _convertLLToCRS_id = _client_service().register_static_object(('TechlogDatabase', 'convertLLToCRS'))
    return _client_service().call(_convertLLToCRS_id, *args, **kwargs)


_convertLLtoCRS_id = None
def convertLLtoCRS(*args, **kwargs):
    """
    convertLLtoCRS(longitude: float, latitude: float, datum: str, unit: str) -> float, float, str, str, str, str
    
    [Deprecated] Use convertLLToCRS instead.
     Convert latitude and longitude to projected coordinates (X and Y)
    
    Args:
        longitude (float): longitude in decimal degrees
        latitude (float): latitude in decimal degrees
        datum (str): projected datum name
        unit (str): unit of X and Y after conversion
    
    Returns:
        float, float, str, str, str, str: X, Y, Unit, ProjCS's Well-Known Text, GeogCS's Well-Known Text, GeogCS name
    """
    global _convertLLtoCRS_id
    if _convertLLtoCRS_id is None:
        _convertLLtoCRS_id = _client_service().register_static_object(('TechlogDatabase', 'convertLLtoCRS'))
    return _client_service().call(_convertLLtoCRS_id, *args, **kwargs)


_convertWellSchematicDatasetToWitsmlObject_id = None
def convertWellSchematicDatasetToWitsmlObject(*args, **kwargs):
    """
    convertWellSchematicDatasetToWitsmlObject(wellName: str, datasetName: str)
    
    Convert wellschematic dataset to witsml.
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    """
    global _convertWellSchematicDatasetToWitsmlObject_id
    if _convertWellSchematicDatasetToWitsmlObject_id is None:
        _convertWellSchematicDatasetToWitsmlObject_id = _client_service().register_static_object(('TechlogDatabase', 'convertWellSchematicDatasetToWitsmlObject'))
    return _client_service().call(_convertWellSchematicDatasetToWitsmlObject_id, *args, **kwargs)


_correspondingUnit_id = None
def correspondingUnit(*args, **kwargs):
    """
    correspondingUnit(sourceUnit: str, targetUnitSystem: str) -> str
    
    Get the corresponding unit from a different unit system
    
    Args:
        sourceUnit (str): a unit name
        targetUnitSystem (str): the unit system name with the associated project level (Company\\MyUnitSystem)
    
    Returns:
        str: corresponding unit found in the target unit system
    """
    global _correspondingUnit_id
    if _correspondingUnit_id is None:
        _correspondingUnit_id = _client_service().register_static_object(('TechlogDatabase', 'correspondingUnit'))
    return _client_service().call(_correspondingUnit_id, *args, **kwargs)


_currentChange_id = None
def currentChange(*args, **kwargs):
    """
    currentChange(databaseName: str) -> bool
    
    Change the current database
    
    Args:
        databaseName (str): database name: {'project' for the project database, 'import' for the import buffer area, 'export', 'trash' for the trash area}
    
    Returns:
        bool: operation exit status
    """
    global _currentChange_id
    if _currentChange_id is None:
        _currentChange_id = _client_service().register_static_object(('TechlogDatabase', 'currentChange'))
    return _client_service().call(_currentChange_id, *args, **kwargs)


_currentDb_id = None
def currentDb(*args, **kwargs):
    """
    currentDb() -> str
    
    Gets the current database type
    
    Returns:
        str: {'project' for the project database, 'import' for the import buffer area, 'export', 'trash' for the trash area}
    """
    global _currentDb_id
    if _currentDb_id is None:
        _currentDb_id = _client_service().register_static_object(('TechlogDatabase', 'currentDb'))
    return _client_service().call(_currentDb_id, *args, **kwargs)


_currentSystemUnitList_id = None
def currentSystemUnitList(*args, **kwargs):
    """
    currentSystemUnitList() -> list
    
    Return the unit list of current unit system
    
    Returns:
        list: The list of units of current unit system
    """
    global _currentSystemUnitList_id
    if _currentSystemUnitList_id is None:
        _currentSystemUnitList_id = _client_service().register_static_object(('TechlogDatabase', 'currentSystemUnitList'))
    return _client_service().call(_currentSystemUnitList_id, *args, **kwargs)


_dataEditorOpen_id = None
def dataEditorOpen(*args, **kwargs):
    """
    dataEditorOpen(variableList: list) -> int
    
    Open a new empty data editor
    
    Args:
        variableList (list): variable list [(wellName.datasetName.variableName), (...)]
    
    Returns:
        int: window ID
    """
    global _dataEditorOpen_id
    if _dataEditorOpen_id is None:
        _dataEditorOpen_id = _client_service().register_static_object(('TechlogDatabase', 'dataEditorOpen'))
    return _client_service().call(_dataEditorOpen_id, *args, **kwargs)


_datasetCompare_id = None
def datasetCompare(*args, **kwargs):
    """
    datasetCompare(wellName1: str, datasetName1: str, wellName2: str, datasetName2: str) -> bool
    
    Compare two datasets
    
    Args:
        wellName1 (str): first well name
        datasetName1 (str): first dataset name
        wellName2 (str): second well name
        datasetName2 (str): second dataset name
    
    Returns:
        bool: True if the two datasets are identical, otherwise False
    """
    global _datasetCompare_id
    if _datasetCompare_id is None:
        _datasetCompare_id = _client_service().register_static_object(('TechlogDatabase', 'datasetCompare'))
    return _client_service().call(_datasetCompare_id, *args, **kwargs)


_datasetCopy_id = None
def datasetCopy(*args, **kwargs):
    """
    datasetCopy(w: str, d: str, databaseSource: str, databaseDestination: str) -> bool
    
    Copy a dataset from a database to another one
    
    Args:
        w (str): well name
        d (str): dataset name
        databaseSource (str): database source = {'project', 'import', 'export', 'trash'}
        databaseDestination (str): database destination = {'project', 'import', 'export', 'trash'}
    
    Returns:
        bool: operation exit status
    """
    global _datasetCopy_id
    if _datasetCopy_id is None:
        _datasetCopy_id = _client_service().register_static_object(('TechlogDatabase', 'datasetCopy'))
    return _client_service().call(_datasetCopy_id, *args, **kwargs)


@_lutils.return_if_exception(False)
def datasetCreate(
    wellName,
    datasetName,
    variableName = None,
    familyName = "",
    unit = "",
    values = None,
    type = "double",
):
    """
    datasetCreate(wellName: str, datasetName: str, variableName: str='', familyName: str='', unit: str='', values: list='', type: str='double') -> bool
    
    Create a new dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): Optional; reference name
        familyName (str): Optional; family name of reference. Set it to None to use family assignment rules
        unit (str): Optional; unit name of reference
        values (list): Optional; values table for reference
        type (str): Optional; reference format: {'float', 'double'}
    
    Returns:
        bool: operation exit status
    """

    import tl as _tl

    _raiseIfPyWERelaxed()

    if type not in ("float", "double"):
        raise _lutils.ValueErrorLog(f"datasetCreate() : unsupported format {type}.")

    project = _tl.entity._get_project_legacy()
    well = project.get_or_create_well(wellName)

    size = len(values) if values is not None else 0
    try:
        dataset = well.create_dataset(datasetName, size)
    except ValueError:
        # Dataset already exists, return False
        return False

    if variableName is None:
        return True

    variable = dataset.create_variable(
        variableName, 1, unit, familyName, type
    )
    dataset.set_reference(variable)

    _lutils.save_variable(
        wellName, datasetName, variableName,
        None, None, values, type=type
    )

    return True


# TODO: interactiveSelection / interactiveSelectionChange ?


_datasetDelete_id = None
def datasetDelete(*args, **kwargs):
    """
    datasetDelete(wellName: str, datasetName: str, refresh: bool=False) -> bool
    
    Delete a dataset from the project
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        refresh (bool): Optional; refresh the project browser
    
    Returns:
        bool: operation exit status
    """
    global _datasetDelete_id
    if _datasetDelete_id is None:
        _datasetDelete_id = _client_service().register_static_object(('TechlogDatabase', 'datasetDelete'))
    return _client_service().call(_datasetDelete_id, *args, **kwargs)


_datasetDirectLoad_id = None
def datasetDirectLoad(*args, **kwargs):
    """
    datasetDirectLoad(dbOrig: str, wellOrig: str, dsOrig: str, dbImport: str, wellImport: str, dsImport: str, mergeMode: str, createNewDataset: bool=True, mergeVarSuffix: str=None) -> bool
    
    Merge two datasets together
    
    Args:
        dbOrig (str): database original ('project', 'import', 'export', 'trash')
        wellOrig (str): well original
        dsOrig (str): ds original
        dbImport (str): database imported ('project', 'import', 'export', 'trash')
        wellImport (str): well imported
        dsImport (str): ds imported
        mergeMode (str): 'AUTO', 'LINEAR', 'ORIGINAL', 'NEW', 'NEW_VERSIONNED', 'NEW_SUFFIXED'
        createNewDataset (bool): Optional; 
        newDatasetName (str): Optional; 
        mergeVarSuffix (str): Optional; 
    
    Returns:
        bool: operation exit status
    """
    global _datasetDirectLoad_id
    if _datasetDirectLoad_id is None:
        _datasetDirectLoad_id = _client_service().register_static_object(('TechlogDatabase', 'datasetDirectLoad'))
    return _client_service().call(_datasetDirectLoad_id, *args, **kwargs)


_datasetDuplicate_id = None
def datasetDuplicate(*args, **kwargs):
    """
    datasetDuplicate(wellName: str, datasetName: str, newWellName: str, newDatasetName: str)
    
    Duplicate a dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        newWellName (str): new well name
        newDatasetName (str): new dataset name
    
    Returns:
        bool: False if error
        str: new dataset name if renamed
    """
    global _datasetDuplicate_id
    if _datasetDuplicate_id is None:
        _datasetDuplicate_id = _client_service().register_static_object(('TechlogDatabase', 'datasetDuplicate'))
    return _client_service().call(_datasetDuplicate_id, *args, **kwargs)


_datasetExists_id = None
def datasetExists(*args, **kwargs):
    """
    datasetExists(wellName: str, datasetName: str) -> bool
    
    Check if the dataset exists in the project (case insensitive)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        bool: dataset exists in the project
    """
    global _datasetExists_id
    if _datasetExists_id is None:
        _datasetExists_id = _client_service().register_static_object(('TechlogDatabase', 'datasetExists'))
    return _client_service().call(_datasetExists_id, *args, **kwargs)


_datasetExpand_id = None
def datasetExpand(*args, **kwargs):
    """
    datasetExpand(wellName: str, datasetName: str, rowCount: int, rowIndex: int) -> bool
    
    Expand a dataset and insert some rows at one reference index
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        rowCount (int): / referenceValues [list]: number of rows to insert or the list of reference values
        rowIndex (int): index where the rows are going to be inserted
    
    Returns:
        bool: the result
    """
    global _datasetExpand_id
    if _datasetExpand_id is None:
        _datasetExpand_id = _client_service().register_static_object(('TechlogDatabase', 'datasetExpand'))
    return _client_service().call(_datasetExpand_id, *args, **kwargs)


_datasetGroup_id = None
def datasetGroup(*args, **kwargs):
    """
    datasetGroup(wellName: str, datasetName: str) -> list
    
    Get the specified dataset group.
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        list: group list
    """
    global _datasetGroup_id
    if _datasetGroup_id is None:
        _datasetGroup_id = _client_service().register_static_object(('TechlogDatabase', 'datasetGroup'))
    return _client_service().call(_datasetGroup_id, *args, **kwargs)


_datasetGroupChange_id = None
def datasetGroupChange(*args, **kwargs):
    """
    datasetGroupChange(wellName: str, datasetName: str, groupName: list) -> bool
    
    Create/change the specified dataset group.
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        groupName (list): group list
    
    Returns:
        bool: operation exit status
    """
    global _datasetGroupChange_id
    if _datasetGroupChange_id is None:
        _datasetGroupChange_id = _client_service().register_static_object(('TechlogDatabase', 'datasetGroupChange'))
    return _client_service().call(_datasetGroupChange_id, *args, **kwargs)


_datasetHistory_id = None
def datasetHistory(*args, **kwargs):
    """
    datasetHistory(wellName: str, datasetName: str) -> list
    
    Return a list of HistoryItem (the dataset history)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        list: HistoryItem
    """
    global _datasetHistory_id
    if _datasetHistory_id is None:
        _datasetHistory_id = _client_service().register_static_object(('TechlogDatabase', 'datasetHistory'))
    return _client_service().call(_datasetHistory_id, *args, **kwargs)


_datasetHistoryAdd_id = None
def datasetHistoryAdd(*args, **kwargs):
    """
    datasetHistoryAdd(wellName: str, datasetName: str, description: str, date: str) -> bool
    
    Add a new history item to the dataset history
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        description (str): description
        date (str): date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
    
    Returns:
        bool: operation exit status
    """
    global _datasetHistoryAdd_id
    if _datasetHistoryAdd_id is None:
        _datasetHistoryAdd_id = _client_service().register_static_object(('TechlogDatabase', 'datasetHistoryAdd'))
    return _client_service().call(_datasetHistoryAdd_id, *args, **kwargs)


_datasetHistoryClear_id = None
def datasetHistoryClear(*args, **kwargs):
    """
    datasetHistoryClear(wellName: str, datasetName: str) -> bool
    
    Clear the history of the dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _datasetHistoryClear_id
    if _datasetHistoryClear_id is None:
        _datasetHistoryClear_id = _client_service().register_static_object(('TechlogDatabase', 'datasetHistoryClear'))
    return _client_service().call(_datasetHistoryClear_id, *args, **kwargs)


_datasetHistoryDelete_id = None
def datasetHistoryDelete(*args, **kwargs):
    """
    datasetHistoryDelete(wellName: str, datasetName: str, startDate: str, endDate: str, content: str, include: bool) -> bool
    
    Delete history items between start and end date from the dataset history
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        startDate (str): start date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
        endDate (str): end date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
        content (str): content to filter on
        include (bool): [=True] include [False] or exclude the item based on the content, within the date range
    
    Returns:
        bool: operation exit status
    """
    global _datasetHistoryDelete_id
    if _datasetHistoryDelete_id is None:
        _datasetHistoryDelete_id = _client_service().register_static_object(('TechlogDatabase', 'datasetHistoryDelete'))
    return _client_service().call(_datasetHistoryDelete_id, *args, **kwargs)


_datasetInformation_id = None
def datasetInformation(*args, **kwargs):
    """
    datasetInformation(wellName: str, datasetName: str, dateType: str)
    
    Return dataset creation / modification date
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        dateType (str): date type: {'creation', 'modification'}
    
    Returns:
        bool: False if error
        str: the date
    """
    global _datasetInformation_id
    if _datasetInformation_id is None:
        _datasetInformation_id = _client_service().register_static_object(('TechlogDatabase', 'datasetInformation'))
    return _client_service().call(_datasetInformation_id, *args, **kwargs)


_datasetIsInFilter_id = None
def datasetIsInFilter(*args, **kwargs):
    """
    datasetIsInFilter(fileName: str) -> bool
    
    Check a dataset is in filter
    
    Args:
        fileName (str): name (= wellname_datasetname)
    
    Returns:
        bool: operation exit status
    """
    global _datasetIsInFilter_id
    if _datasetIsInFilter_id is None:
        _datasetIsInFilter_id = _client_service().register_static_object(('TechlogDatabase', 'datasetIsInFilter'))
    return _client_service().call(_datasetIsInFilter_id, *args, **kwargs)


_datasetList_id = None
def datasetList(*args, **kwargs):
    """
    datasetList(wellName: str) -> list
    
    Return the list of datasets
    
    Args:
        wellName (str): well name
    
    Returns:
        list: the list of the datasets present in the 'filtered' project
    """
    global _datasetList_id
    if _datasetList_id is None:
        _datasetList_id = _client_service().register_static_object(('TechlogDatabase', 'datasetList'))
    return _client_service().call(_datasetList_id, *args, **kwargs)


_datasetMerge_id = None
def datasetMerge(*args, **kwargs):
    """
    datasetMerge(wellName: str, dataForm: list, newDatasetName: str, referenceSamplingRate: float, referenceUnitName: str, referenceFamilyName: str) -> bool
    
    Merge dataset from list to one single dataset
    
    Args:
        wellName (str): well name
        dataForm (list): data : data form - ['datasetName.variableName.outputVariableName', ...] the output variable name is optional
        newDatasetName (str): new dataset name
        referenceSamplingRate (float): reference sampling rate
        referenceUnitName (str): reference unit name
        referenceFamilyName (str): reference family name
    
    Returns:
        bool: operation exit status
    """
    global _datasetMerge_id
    if _datasetMerge_id is None:
        _datasetMerge_id = _client_service().register_static_object(('TechlogDatabase', 'datasetMerge'))
    return _client_service().call(_datasetMerge_id, *args, **kwargs)


_datasetMove_id = None
def datasetMove(*args, **kwargs):
    """
    datasetMove(w: str, d: str, databaseSource: str, databaseDestination: str) -> bool
    
    Move a dataset from a database to another one
    
    Args:
        w (str): well name
        d (str): dataset name
        databaseSource (str): database source = {'project', 'import', 'export', 'trash'}
        databaseDestination (str): database destination = {'project', 'import', 'export', 'trash'}
    
    Returns:
        bool: operation exit status
    """
    global _datasetMove_id
    if _datasetMove_id is None:
        _datasetMove_id = _client_service().register_static_object(('TechlogDatabase', 'datasetMove'))
    return _client_service().call(_datasetMove_id, *args, **kwargs)


_datasetNewName_id = None
def datasetNewName(*args, **kwargs):
    """
    datasetNewName(wellName: str, datasetName: str) -> str
    
    Give a new and unused name for a dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        str: new dataset name
    """
    global _datasetNewName_id
    if _datasetNewName_id is None:
        _datasetNewName_id = _client_service().register_static_object(('TechlogDatabase', 'datasetNewName'))
    return _client_service().call(_datasetNewName_id, *args, **kwargs)


_datasetPropertyChange_id = None
def datasetPropertyChange(*args, **kwargs):
    """
    datasetPropertyChange(wellName: str, datasetName: str, propertyName: str, propertyValue: str, propertyUnit: str='', propertyDescription: str='') -> bool
    
    Create/change the specified dataset property
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        propertyName (str): property name
        propertyValue (str): property value
        propertyUnit (str): Optional; property unit
        propertyDescription (str): Optional; property description
    
    Returns:
        bool: operation exit status
    """
    global _datasetPropertyChange_id
    if _datasetPropertyChange_id is None:
        _datasetPropertyChange_id = _client_service().register_static_object(('TechlogDatabase', 'datasetPropertyChange'))
    return _client_service().call(_datasetPropertyChange_id, *args, **kwargs)


_datasetPropertyDelete_id = None
def datasetPropertyDelete(*args, **kwargs):
    """
    datasetPropertyDelete(wellName: str, datasetName: str, propertyName: str) -> bool
    
    Delete a dataset property
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        propertyName (str): property name
    
    Returns:
        bool: operation exit status
    """
    global _datasetPropertyDelete_id
    if _datasetPropertyDelete_id is None:
        _datasetPropertyDelete_id = _client_service().register_static_object(('TechlogDatabase', 'datasetPropertyDelete'))
    return _client_service().call(_datasetPropertyDelete_id, *args, **kwargs)


_datasetPropertyDescription_id = None
def datasetPropertyDescription(*args, **kwargs):
    """
    datasetPropertyDescription(wellName: str, datasetName: str, propertyName: str) -> str
    
    Return the dataset property description
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        propertyName (str): property name
    
    Returns:
        str: property description
    """
    global _datasetPropertyDescription_id
    if _datasetPropertyDescription_id is None:
        _datasetPropertyDescription_id = _client_service().register_static_object(('TechlogDatabase', 'datasetPropertyDescription'))
    return _client_service().call(_datasetPropertyDescription_id, *args, **kwargs)


_datasetPropertyList_id = None
def datasetPropertyList(*args, **kwargs):
    """
    datasetPropertyList(wellName: str, datasetName: str) -> list
    
    Return the list of dataset property names
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        list: property names list
    """
    global _datasetPropertyList_id
    if _datasetPropertyList_id is None:
        _datasetPropertyList_id = _client_service().register_static_object(('TechlogDatabase', 'datasetPropertyList'))
    return _client_service().call(_datasetPropertyList_id, *args, **kwargs)


_datasetPropertyUnit_id = None
def datasetPropertyUnit(*args, **kwargs):
    """
    datasetPropertyUnit(wellName: str, datasetName: str, propertyName: str) -> str
    
    Return the dataset property unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        propertyName (str): property name
    
    Returns:
        str: property unit
    """
    global _datasetPropertyUnit_id
    if _datasetPropertyUnit_id is None:
        _datasetPropertyUnit_id = _client_service().register_static_object(('TechlogDatabase', 'datasetPropertyUnit'))
    return _client_service().call(_datasetPropertyUnit_id, *args, **kwargs)


_datasetPropertyValue_id = None
def datasetPropertyValue(*args, **kwargs):
    """
    datasetPropertyValue(wellName: str, datasetName: str, propertyName: str) -> str
    
    Return the dataset property value
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        propertyName (str): property name
    
    Returns:
        str: property value
    """
    global _datasetPropertyValue_id
    if _datasetPropertyValue_id is None:
        _datasetPropertyValue_id = _client_service().register_static_object(('TechlogDatabase', 'datasetPropertyValue'))
    return _client_service().call(_datasetPropertyValue_id, *args, **kwargs)


_datasetReduce_id = None
def datasetReduce(*args, **kwargs):
    """
    datasetReduce(wellName: str, datasetName: str, rowCount: int, rowIndex: int) -> bool
    
    Reduce a dataset and delete some rows at one reference index
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        rowCount (int): number of rows to delete
        rowIndex (int): index where the rows are going to be deleted
    
    Returns:
        bool: the result
    """
    global _datasetReduce_id
    if _datasetReduce_id is None:
        _datasetReduce_id = _client_service().register_static_object(('TechlogDatabase', 'datasetReduce'))
    return _client_service().call(_datasetReduce_id, *args, **kwargs)


_datasetReferenceChange_id = None
def datasetReferenceChange(*args, **kwargs):
    """
    datasetReferenceChange(wellName: str, datasetName: str, variableName: str, createNewDataset: bool=True, showTheWarning: bool=True) -> bool
    
    Change the dataset reference
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        createNewDataset (bool): Optional; create a new dataset
        showTheWarning (bool): Optional; show the warnings
    
    Returns:
        bool: operation exit status
    """
    global _datasetReferenceChange_id
    if _datasetReferenceChange_id is None:
        _datasetReferenceChange_id = _client_service().register_static_object(('TechlogDatabase', 'datasetReferenceChange'))
    return _client_service().call(_datasetReferenceChange_id, *args, **kwargs)


_datasetRename_id = None
def datasetRename(*args, **kwargs):
    """
    datasetRename(wellName: str, datasetName: str, newDatasetName: str) -> bool
    
    Rename an existing dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        newDatasetName (str): new dataset name
    
    Returns:
        bool: operation exit status
    """
    global _datasetRename_id
    if _datasetRename_id is None:
        _datasetRename_id = _client_service().register_static_object(('TechlogDatabase', 'datasetRename'))
    return _client_service().call(_datasetRename_id, *args, **kwargs)


_datasetSamplingRate_id = None
def datasetSamplingRate(*args, **kwargs):
    """
    datasetSamplingRate(wellName: str, datasetName: str, readInFile: bool=False, unit: str=None) -> float
    
    Return the sampling rate of a dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        readInFile (bool): Optional; read in the file
        unit (str): Optional; unit
    
    Returns:
        float: dataset sampling rate
    """
    global _datasetSamplingRate_id
    if _datasetSamplingRate_id is None:
        _datasetSamplingRate_id = _client_service().register_static_object(('TechlogDatabase', 'datasetSamplingRate'))
    return _client_service().call(_datasetSamplingRate_id, *args, **kwargs)


_datasetSize_id = None
def datasetSize(*args, **kwargs):
    """
    datasetSize(wellName: str, datasetName: str) -> int
    
    Return the dataset size
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        int: dataset size
    """
    global _datasetSize_id
    if _datasetSize_id is None:
        _datasetSize_id = _client_service().register_static_object(('TechlogDatabase', 'datasetSize'))
    return _client_service().call(_datasetSize_id, *args, **kwargs)


_datasetSort_id = None
def datasetSort(*args, **kwargs):
    """
    datasetSort(wellName: str, datasetName: str, epsilon: bool=True, askUser: bool=False) -> bool
    
    Sort the dataset by its reference
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        epsilon (bool): Optional; Add an epsilon for duplicated depths
        askUser (bool): Optional; Ask the user for confirmation
    
    Returns:
        bool: operation exit status
    """
    global _datasetSort_id
    if _datasetSort_id is None:
        _datasetSort_id = _client_service().register_static_object(('TechlogDatabase', 'datasetSort'))
    return _client_service().call(_datasetSort_id, *args, **kwargs)


_datasetType_id = None
def datasetType(*args, **kwargs):
    """
    datasetType(wellName: str, datasetName: str) -> str
    
    Return the dataset type
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        str: dataset type : {'continuous', 'interval', 'point data',
                              'checkshots', 'time-depth', 'trajectory',
                              'PQC', 'Quanti', 'images', 'borehole images',
                              'shift', 'multi-well', 'contact',
                              'variable group properties', 'wavelet',
                              'annotation', 'well schematics',
                              'tool string', 'symbols', 'markers'}
    """
    global _datasetType_id
    if _datasetType_id is None:
        _datasetType_id = _client_service().register_static_object(('TechlogDatabase', 'datasetType'))
    return _client_service().call(_datasetType_id, *args, **kwargs)


_datasetTypeChange_id = None
def datasetTypeChange(*args, **kwargs):
    """
    datasetTypeChange(wellName: str, datasetName: str, datasetType: str) -> bool
    
    Change the dataset type ID
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        datasetType (str): dataset type : {'continuous', 'interval', 'point data',
                                 'checkshots', 'time-depth', 'trajectory',
                                 'PQC', 'Quanti', 'images', 'borehole images',
                                 'shift', 'multi-well', 'contact',
                                 'variable group properties', 'wavelet',
                                 'annotation', 'well schematics',
                                 'tool string', 'symbols', 'markers'}
    
    Returns:
        bool: operation exit status
    """
    global _datasetTypeChange_id
    if _datasetTypeChange_id is None:
        _datasetTypeChange_id = _client_service().register_static_object(('TechlogDatabase', 'datasetTypeChange'))
    return _client_service().call(_datasetTypeChange_id, *args, **kwargs)


_datasetTypeID_id = None
def datasetTypeID(*args, **kwargs):
    """
    datasetTypeID(wellName: str, datasetName: str) -> int
    
    Return the dataset type ID
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        int: dataset type ID : {0='continuous', 1='interval', 2='point data',
                                   3='checkshots', 4='time-depth', 5='trajectory',
                                   6='PQC', 7='Quanti', 8='images', 9='borehole images',
                                   10='shift', 11='multi-well', 12='contact',
                                   13='variable group properties', 14='wavelet',
                                   15='annotation', 16='well schematics',
                                   17='tool string', 18='symbols', 19='markers'}
    """
    global _datasetTypeID_id
    if _datasetTypeID_id is None:
        _datasetTypeID_id = _client_service().register_static_object(('TechlogDatabase', 'datasetTypeID'))
    return _client_service().call(_datasetTypeID_id, *args, **kwargs)


_datasetTypeIDChange_id = None
def datasetTypeIDChange(*args, **kwargs):
    """
    datasetTypeIDChange(wellName: str, datasetName: str, typeID: int) -> bool
    
    Change the dataset type ID
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        typeID (int): dataset type ID : {0='continuous', 1='interval', 2='point data',
                                      3='checkshots', 4='time-depth', 5='trajectory',
                                      6='PQC', 7='Quanti', 8='images', 9='borehole images',
                                      10='shift', 11='multi-well', 12='contact',
                                      13='variable group properties', 14='wavelet',
                                      15='annotation', 16='well schematics',
                                      17='tool string', 18='symbols', 19='markers'}
    
    Returns:
        bool: operation exit status
    """
    global _datasetTypeIDChange_id
    if _datasetTypeIDChange_id is None:
        _datasetTypeIDChange_id = _client_service().register_static_object(('TechlogDatabase', 'datasetTypeIDChange'))
    return _client_service().call(_datasetTypeIDChange_id, *args, **kwargs)


_datasetZoneDetail_id = None
def datasetZoneDetail(*args, **kwargs):
    """
    datasetZoneDetail(wellName: str, datasetZonation: str, zoneName: str, zoneFamily: str='Zone Name') -> list
    
    Return values of limits of the zonation
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
        zoneName (str): zone name
        zoneFamily (str): Optional; zonation family
    
    Returns:
        list: element list
    """
    global _datasetZoneDetail_id
    if _datasetZoneDetail_id is None:
        _datasetZoneDetail_id = _client_service().register_static_object(('TechlogDatabase', 'datasetZoneDetail'))
    return _client_service().call(_datasetZoneDetail_id, *args, **kwargs)


_datasetZoneIndice_id = None
def datasetZoneIndice(*args, **kwargs):
    """
    datasetZoneIndice(wellName: str, datasetName: str, datasetZonation: str, zoneName: str, zonationFamily: str='Zone Name', indexesInFloat: bool=False) -> list
    
    Return limits of the zonation
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        datasetZonation (str): dataset zonation
        zoneName (str): zone name
        zonationFamily (str): Optional; zonation family
        indexesInFloat (bool): Optional; Computes the indexes as if the dataset reference is in floating precision
    
    Returns:
        list: element list : {beginIndex, endIndex [, beginIndex, endIndex]*} in the dataset
    """
    global _datasetZoneIndice_id
    if _datasetZoneIndice_id is None:
        _datasetZoneIndice_id = _client_service().register_static_object(('TechlogDatabase', 'datasetZoneIndice'))
    return _client_service().call(_datasetZoneIndice_id, *args, **kwargs)


_depthInteractionChange_id = None
def depthInteractionChange(*args, **kwargs):
    """
    depthInteractionChange(wellName: str, unit: str, depth: float, mindepth: float, maxdepth: float) -> bool
    
    Send the depth interaction
    
    Args:
        wellName (str): well name
        unit (str): unit name
        depth (float): depth value (Measured Depth)
        mindepth (float): , optional: min depth value for 'window mode' depth interaction (Measured Depth)
        maxdepth (float): , optional: max depth value for 'window mode' depth interaction (Measured Depth)
    
    Returns:
        bool: operation exit status
    """
    global _depthInteractionChange_id
    if _depthInteractionChange_id is None:
        _depthInteractionChange_id = _client_service().register_static_object(('TechlogDatabase', 'depthInteractionChange'))
    return _client_service().call(_depthInteractionChange_id, *args, **kwargs)


_dirCompany_id = None
def dirCompany(*args, **kwargs):
    """
    dirCompany() -> str
    
    Return the company folder
    
    Returns:
        str: company folder
    """
    global _dirCompany_id
    if _dirCompany_id is None:
        _dirCompany_id = _client_service().register_static_object(('TechlogDatabase', 'dirCompany'))
    return _client_service().call(_dirCompany_id, *args, **kwargs)


_dirCompanyChange_id = None
def dirCompanyChange(*args, **kwargs):
    """
    dirCompanyChange(companyFolderPath: str) -> bool
    
    Change the company dir
    
    Args:
        companyFolderPath (str): new company folder name
    
    Returns:
        bool: operation exit status
    """
    global _dirCompanyChange_id
    if _dirCompanyChange_id is None:
        _dirCompanyChange_id = _client_service().register_static_object(('TechlogDatabase', 'dirCompanyChange'))
    return _client_service().call(_dirCompanyChange_id, *args, **kwargs)


_dirProject_id = None
def dirProject(*args, **kwargs):
    """
    dirProject() -> str
    
    Return the project folder
    
    Returns:
        str: project folder
    """
    global _dirProject_id
    if _dirProject_id is None:
        _dirProject_id = _client_service().register_static_object(('TechlogDatabase', 'dirProject'))
    return _client_service().call(_dirProject_id, *args, **kwargs)


_dirProjectList_id = None
def dirProjectList(*args, **kwargs):
    """
    dirProjectList() -> list
    
    Return the project folder list
    
    Returns:
        list: project folder list
    """
    global _dirProjectList_id
    if _dirProjectList_id is None:
        _dirProjectList_id = _client_service().register_static_object(('TechlogDatabase', 'dirProjectList'))
    return _client_service().call(_dirProjectList_id, *args, **kwargs)


_dirTechlog_id = None
def dirTechlog(*args, **kwargs):
    """
    dirTechlog() -> str
    
    Return the Techlog folder
    
    Returns:
        str: Techlog folder
    """
    global _dirTechlog_id
    if _dirTechlog_id is None:
        _dirTechlog_id = _client_service().register_static_object(('TechlogDatabase', 'dirTechlog'))
    return _client_service().call(_dirTechlog_id, *args, **kwargs)


_dirUser_id = None
def dirUser(*args, **kwargs):
    """
    dirUser() -> str
    
    Return the user folder
    
    Returns:
        str: user folder
    """
    global _dirUser_id
    if _dirUser_id is None:
        _dirUser_id = _client_service().register_static_object(('TechlogDatabase', 'dirUser'))
    return _client_service().call(_dirUser_id, *args, **kwargs)


_dirUserChange_id = None
def dirUserChange(*args, **kwargs):
    """
    dirUserChange(userFolderPath: str) -> bool
    
    Change the user dir
    
    Args:
        userFolderPath (str): new user folder path
    
    Returns:
        bool: operation exit status
    """
    global _dirUserChange_id
    if _dirUserChange_id is None:
        _dirUserChange_id = _client_service().register_static_object(('TechlogDatabase', 'dirUserChange'))
    return _client_service().call(_dirUserChange_id, *args, **kwargs)


_doFirstReadTreatment_id = None
def doFirstReadTreatment(*args, **kwargs):
    """
    doFirstReadTreatment(fileName: str, logName: str, threshold: int) -> float
    
    Do the treatment of the first last reading module
    
    Args:
        fileName (str): the file containing the datas
        logName (str): the log on which we want to apply the first last reading
        threshold (int): the threshold we want to apply on the logOutput:
        float: result of the treatment
    """
    global _doFirstReadTreatment_id
    if _doFirstReadTreatment_id is None:
        _doFirstReadTreatment_id = _client_service().register_static_object(('TechlogDatabase', 'doFirstReadTreatment'))
    return _client_service().call(_doFirstReadTreatment_id, *args, **kwargs)


_doNothing_id = None
def doNothing(*args, **kwargs):
    """
    doNothing()
    
    Pass and return True
    """
    global _doNothing_id
    if _doNothing_id is None:
        _doNothing_id = _client_service().register_static_object(('TechlogDatabase', 'doNothing'))
    return _client_service().call(_doNothing_id, *args, **kwargs)


_doTheComposition_id = None
def doTheComposition(*args, **kwargs):
    """
    doTheComposition(wellName: str, setName: str, wellSource: str, setSource: str, isDoubleRef: bool, borneMin: float, borneMax: float, VarsSelected: list, isOrFilter: bool, VarsFiltered: list)
    
    Do the composition in the Dataset Builder
    
    Args:
        wellName (str): Destination Well Name
        setName (str): Destination Dataset Name
        wellSource (str): Source Well Name
        setSource (str): Source Datasets Names
        isDoubleRef (bool): True the datasetSource has a double precision reference, False if not)
        borneMin (float): TOP where the user wants to begin the composition
        borneMax (float): BOTTOM where the user wants to finish the composition
        VarsSelected (list): selected variables to be composed
        isOrFilter (bool): Type of the filter (True=OR / False=AND)
        VarsFiltered (list): selected variables for filtering
    """
    global _doTheComposition_id
    if _doTheComposition_id is None:
        _doTheComposition_id = _client_service().register_static_object(('TechlogDatabase', 'doTheComposition'))
    return _client_service().call(_doTheComposition_id, *args, **kwargs)


_expandEnvironmentStringsTL_id = None
def expandEnvironmentStringsTL(*args, **kwargs):
    """
    expandEnvironmentStringsTL(sourceString: str) -> str
    
    Replace %environment key% with its value
    
    Args:
        sourceString (str): environment key
    
    Returns:
        str: value in the environment
    """
    global _expandEnvironmentStringsTL_id
    if _expandEnvironmentStringsTL_id is None:
        _expandEnvironmentStringsTL_id = _client_service().register_static_object(('TechlogDatabase', 'expandEnvironmentStringsTL'))
    return _client_service().call(_expandEnvironmentStringsTL_id, *args, **kwargs)


_exportBufferClose_id = None
def exportBufferClose(*args, **kwargs):
    """
    exportBufferClose()
    
    Close the export buffer
    """
    global _exportBufferClose_id
    if _exportBufferClose_id is None:
        _exportBufferClose_id = _client_service().register_static_object(('TechlogDatabase', 'exportBufferClose'))
    return _client_service().call(_exportBufferClose_id, *args, **kwargs)


_exportBufferOpen_id = None
def exportBufferOpen(*args, **kwargs):
    """
    exportBufferOpen()
    
    Open the export buffer
    """
    global _exportBufferOpen_id
    if _exportBufferOpen_id is None:
        _exportBufferOpen_id = _client_service().register_static_object(('TechlogDatabase', 'exportBufferOpen'))
    return _client_service().call(_exportBufferOpen_id, *args, **kwargs)


_exportDatabaseObjects_id = None
def exportDatabaseObjects(*args, **kwargs):
    """
    exportDatabaseObjects(dirpath: str, Object, Object) -> bool
    
    Export database objects from the project
    
    Args:
        dirpath (str): directory path where the output files are going to be created
        Object (None): list[list]: object name list
        Object (None): type[str]: object type
    
    Returns:
        bool: operation exit status
    """
    global _exportDatabaseObjects_id
    if _exportDatabaseObjects_id is None:
        _exportDatabaseObjects_id = _client_service().register_static_object(('TechlogDatabase', 'exportDatabaseObjects'))
    return _client_service().call(_exportDatabaseObjects_id, *args, **kwargs)


_exportFile_id = None
def exportFile(*args, **kwargs):
    """
    exportFile(filepath: str, wellOrDatasetList: list, format: str, useOwn: bool=False, useFilter: bool=False, topBottomList: list=[]) -> bool
    
    Export file from the project
    
    Args:
        filepath (str): complete path of the output file (except for XML format where it is the directory where the output files will be created)
        wellOrDatasetList (list): well name list, or well.dataset to export
        format (str): export format: {'DLIS', 'LAS 3.0', 'LAS 2.0', 'TECHCSV', 'DAT', 'XML'}
        useOwn (bool): Optional; use the original well name from well property
        useFilter (bool): Optional; Take the filter on the project project browser into consideration
        topBottomList (list): Optional; list of couple [top, bottom]
    
    Returns:
        bool: operation exit status
    """
    global _exportFile_id
    if _exportFile_id is None:
        _exportFile_id = _client_service().register_static_object(('TechlogDatabase', 'exportFile'))
    return _client_service().call(_exportFile_id, *args, **kwargs)


_exportMissingValue_id = None
def exportMissingValue(*args, **kwargs):
    """
    exportMissingValue() -> str
    
    Return the null value export
    
    Returns:
        str: current export null value
    """
    global _exportMissingValue_id
    if _exportMissingValue_id is None:
        _exportMissingValue_id = _client_service().register_static_object(('TechlogDatabase', 'exportMissingValue'))
    return _client_service().call(_exportMissingValue_id, *args, **kwargs)


_exportMissingValueChange_id = None
def exportMissingValueChange(*args, **kwargs):
    """
    exportMissingValueChange(value: str) -> bool
    
    Set the export project null value
    
    Args:
        value (str): new value to set
    
    Returns:
        bool: operation exit status
    """
    global _exportMissingValueChange_id
    if _exportMissingValueChange_id is None:
        _exportMissingValueChange_id = _client_service().register_static_object(('TechlogDatabase', 'exportMissingValueChange'))
    return _client_service().call(_exportMissingValueChange_id, *args, **kwargs)


_exportProject_id = None
def exportProject(*args, **kwargs):
    """
    exportProject(filepath: str, projectType: str)
    
    Export the project in a compressed format (.tlpx)
    
    Args:
        filepath (str): complete path of the output project (projectName)
        projectType (str): {'Project', 'Import', 'Export', 'Trash'} by default it's the 'Export'
    Exceptions:
       Raise exceptions if:
        None: already exists
        None: file path
        None: project type
    """
    global _exportProject_id
    if _exportProject_id is None:
        _exportProject_id = _client_service().register_static_object(('TechlogDatabase', 'exportProject'))
    return _client_service().call(_exportProject_id, *args, **kwargs)


_familyAdd_id = None
def familyAdd(*args, **kwargs):
    """
    familyAdd(level: str, mainFamily: str, familyName: str, unit: str='', min: float, max: float, limitInf: float, limitSup: float) -> bool
    
    Add a family
    
    Args:
        level (str): level: {'user', 'project', 'company'}
        mainFamily (str): main family name
        familyName (str): family name
        unit (str): Optional; unit name
        min (float): min
        max (float): max
        limitInf (float): limit inf
        limitSup (float): limit sup
    
    Returns:
        bool: operation exit status
    """
    global _familyAdd_id
    if _familyAdd_id is None:
        _familyAdd_id = _client_service().register_static_object(('TechlogDatabase', 'familyAdd'))
    return _client_service().call(_familyAdd_id, *args, **kwargs)


_familyAutoAssignment_id = None
def familyAutoAssignment(*args, **kwargs):
    """
    familyAutoAssignment(level: str, catalog: str, allVariables: bool) -> bool
    
    Reassign families to variables in the project based on family assignment rules stored in a catalog at a given storage level
    
    Args:
        level (str): level = { 'user', 'project', 'company', 'techlog', 'all' }. Default value is set to 'techlog'
        catalog (str): catalog name = { 'Techlog', 'Schlumberger-OSDD' }. Default value is set to 'Techlog'
        allVariables (bool): True = reassign families to all variables in the project(default value), False = reassign families only to unassigned variables
    
    Returns:
        bool: operation exit status
    """
    global _familyAutoAssignment_id
    if _familyAutoAssignment_id is None:
        _familyAutoAssignment_id = _client_service().register_static_object(('TechlogDatabase', 'familyAutoAssignment'))
    return _client_service().call(_familyAutoAssignment_id, *args, **kwargs)


_familyList_id = None
def familyList(*args, **kwargs):
    """
    familyList(mainFamily: str) -> list
    
    Return the list of known families for a given main family
    
    Args:
        mainFamily (str): main family
    
    Returns:
        list: The list of known families for the given main family
    """
    global _familyList_id
    if _familyList_id is None:
        _familyList_id = _client_service().register_static_object(('TechlogDatabase', 'familyList'))
    return _client_service().call(_familyList_id, *args, **kwargs)


_familyMax_id = None
def familyMax(*args, **kwargs):
    """
    familyMax(familyName: str) -> str
    
    Family max value
    
    Args:
        familyName (str): family name
    
    Returns:
        str: family max value
    """
    global _familyMax_id
    if _familyMax_id is None:
        _familyMax_id = _client_service().register_static_object(('TechlogDatabase', 'familyMax'))
    return _client_service().call(_familyMax_id, *args, **kwargs)


_familyMin_id = None
def familyMin(*args, **kwargs):
    """
    familyMin(familyName: str) -> str
    
    Family min value
    
    Args:
        familyName (str): family name
    
    Returns:
        str: family min value
    """
    global _familyMin_id
    if _familyMin_id is None:
        _familyMin_id = _client_service().register_static_object(('TechlogDatabase', 'familyMin'))
    return _client_service().call(_familyMin_id, *args, **kwargs)


_familyNameAssignment_id = None
def familyNameAssignment(*args, **kwargs):
    """
    familyNameAssignment(variableName: str, unitName: str) -> str
    
    Family name assignment
    
    Args:
        variableName (str): variable name
        unitName (str): unit name
    
    Returns:
        str: family name
    """
    global _familyNameAssignment_id
    if _familyNameAssignment_id is None:
        _familyNameAssignment_id = _client_service().register_static_object(('TechlogDatabase', 'familyNameAssignment'))
    return _client_service().call(_familyNameAssignment_id, *args, **kwargs)


_familyProperty_id = None
def familyProperty(*args, **kwargs):
    """
    familyProperty(family: str, property: str, level: str='all') -> str
    
    Return the value of a family property
    
    Args:
        family (str): family name
        property (str): property name
        level (str): Optional; level: {'all', 'user', 'project', 'company', 'techlog'}
    
    Returns:
        str: the value of the property
    """
    global _familyProperty_id
    if _familyProperty_id is None:
        _familyProperty_id = _client_service().register_static_object(('TechlogDatabase', 'familyProperty'))
    return _client_service().call(_familyProperty_id, *args, **kwargs)


_familyPropertyList_id = None
def familyPropertyList(*args, **kwargs):
    """
    familyPropertyList() -> list
    
    Return the list of family properties
    
    Returns:
        list: the list of family properties
    """
    global _familyPropertyList_id
    if _familyPropertyList_id is None:
        _familyPropertyList_id = _client_service().register_static_object(('TechlogDatabase', 'familyPropertyList'))
    return _client_service().call(_familyPropertyList_id, *args, **kwargs)


_familyScale_id = None
def familyScale(*args, **kwargs):
    """
    familyScale(familyName: str) -> str
    
    Family scale
    
    Args:
        familyName (str): family name
    
    Returns:
        str: family scale
    """
    global _familyScale_id
    if _familyScale_id is None:
        _familyScale_id = _client_service().register_static_object(('TechlogDatabase', 'familyScale'))
    return _client_service().call(_familyScale_id, *args, **kwargs)


_familyUnit_id = None
def familyUnit(*args, **kwargs):
    """
    familyUnit(familyName: str) -> str
    
    Family unit name
    
    Args:
        familyName (str): family name
    
    Returns:
        str: unit name
    """
    global _familyUnit_id
    if _familyUnit_id is None:
        _familyUnit_id = _client_service().register_static_object(('TechlogDatabase', 'familyUnit'))
    return _client_service().call(_familyUnit_id, *args, **kwargs)


_forbiddenCharacterList_id = None
def forbiddenCharacterList(*args, **kwargs):
    """
    forbiddenCharacterList(objectType: int=0) -> list
    
    Return the list of forbidden characters in Techlog object names.
    
    Args:
        objectType (int): Optional; {0=data(well, dataset, variable or group), 1=project, 2=databaseObject}
    
    Returns:
        list: list of forbidden characters
    """
    global _forbiddenCharacterList_id
    if _forbiddenCharacterList_id is None:
        _forbiddenCharacterList_id = _client_service().register_static_object(('TechlogDatabase', 'forbiddenCharacterList'))
    return _client_service().call(_forbiddenCharacterList_id, *args, **kwargs)


_getAWILogViewID_id = None
def getAWILogViewID(*args, **kwargs):
    """
    getAWILogViewID() -> int
    
    Return the id of the Logview generated by selected workflow method
    
    Returns:
        int: id of the Logview, -1 if it is not yet created
    """
    global _getAWILogViewID_id
    if _getAWILogViewID_id is None:
        _getAWILogViewID_id = _client_service().register_static_object(('TechlogDatabase', 'getAWILogViewID'))
    return _client_service().call(_getAWILogViewID_id, *args, **kwargs)


_getAWIlogViewID_id = None
def getAWIlogViewID(*args, **kwargs):
    """
    getAWIlogViewID() -> int
    
    [Deprecated] Use getAWILogViewID instead.
     Return the id of the Logview generated by selected workflow method
    
    Returns:
        int: id of the Logview, -1 if it is not yet created
    """
    global _getAWIlogViewID_id
    if _getAWIlogViewID_id is None:
        _getAWIlogViewID_id = _client_service().register_static_object(('TechlogDatabase', 'getAWIlogViewID'))
    return _client_service().call(_getAWIlogViewID_id, *args, **kwargs)


_getAbsoluteBHIPath_id = None
def getAbsoluteBHIPath(*args, **kwargs):
    """
    getAbsoluteBHIPath()
    
    Return the absolute BHI path
    
    Args:
        str: relative BHI path
    
    Returns:
        str: absolute BHI path
    """
    global _getAbsoluteBHIPath_id
    if _getAbsoluteBHIPath_id is None:
        _getAbsoluteBHIPath_id = _client_service().register_static_object(('TechlogDatabase', 'getAbsoluteBHIPath'))
    return _client_service().call(_getAbsoluteBHIPath_id, *args, **kwargs)


_getCRSGeo2DList_id = None
def getCRSGeo2DList(*args, **kwargs):
    """
    getCRSGeo2DList() -> list
    
    Get the list of the geographic2D datum names
    
    Returns:
        list: list of the geographic2D datum names
    """
    global _getCRSGeo2DList_id
    if _getCRSGeo2DList_id is None:
        _getCRSGeo2DList_id = _client_service().register_static_object(('TechlogDatabase', 'getCRSGeo2DList'))
    return _client_service().call(_getCRSGeo2DList_id, *args, **kwargs)


_getCRSGeo2DToList_id = None
def getCRSGeo2DToList(*args, **kwargs):
    """
    getCRSGeo2DToList(datum: str) -> list
    
    Get the list of the geographic2D datum names which can be transformed from an other geographic2D datum
    
    Args:
        datum (str): name of the input geographic2D datum
    
    Returns:
        list: list of the geographic2D datum names
    """
    global _getCRSGeo2DToList_id
    if _getCRSGeo2DToList_id is None:
        _getCRSGeo2DToList_id = _client_service().register_static_object(('TechlogDatabase', 'getCRSGeo2DToList'))
    return _client_service().call(_getCRSGeo2DToList_id, *args, **kwargs)


_getCRSProjList_id = None
def getCRSProjList(*args, **kwargs):
    """
    getCRSProjList() -> list
    
    [Deprecated] Use getCRSProjectList instead
     Get the list of the projected datum names
    
    Returns:
        list: list of the projected datum names
    """
    global _getCRSProjList_id
    if _getCRSProjList_id is None:
        _getCRSProjList_id = _client_service().register_static_object(('TechlogDatabase', 'getCRSProjList'))
    return _client_service().call(_getCRSProjList_id, *args, **kwargs)


_getCRSProjToList_id = None
def getCRSProjToList(*args, **kwargs):
    """
    getCRSProjToList(datum) -> list
    
    [Deprecated] Use getCRSProjectToList instead
     Get the list of the projected datum names which can be transformed from a geographic2D datum
    
    Args:
        datum (None): name [str]: name of the input geographic2D datum
    
    Returns:
        list: list of the projected datum names
    """
    global _getCRSProjToList_id
    if _getCRSProjToList_id is None:
        _getCRSProjToList_id = _client_service().register_static_object(('TechlogDatabase', 'getCRSProjToList'))
    return _client_service().call(_getCRSProjToList_id, *args, **kwargs)


_getCRSProjectList_id = None
def getCRSProjectList(*args, **kwargs):
    """
    getCRSProjectList() -> list
    
    Get the list of the projected datum names
    
    Returns:
        list: list of the projected datum names
    """
    global _getCRSProjectList_id
    if _getCRSProjectList_id is None:
        _getCRSProjectList_id = _client_service().register_static_object(('TechlogDatabase', 'getCRSProjectList'))
    return _client_service().call(_getCRSProjectList_id, *args, **kwargs)


_getCRSProjectToList_id = None
def getCRSProjectToList(*args, **kwargs):
    """
    getCRSProjectToList(datum: str) -> list
    
    Get the list of the projected datum names which can be transformed from a geographic2D datum
    
    Args:
        datum (str): name of the input geographic2D datum
    
    Returns:
        list: list of the projected datum names
    """
    global _getCRSProjectToList_id
    if _getCRSProjectToList_id is None:
        _getCRSProjectToList_id = _client_service().register_static_object(('TechlogDatabase', 'getCRSProjectToList'))
    return _client_service().call(_getCRSProjectToList_id, *args, **kwargs)


_getMagneticData_id = None
def getMagneticData(*args, **kwargs):
    """
    getMagneticData(latitude: float, longitude: float, depth: float, day: float, month: float, year: float) -> float, float, float, float, float, float, float, float, float, float, float, float, float, float
    
    Get magnetic declination and inclination at a defined location and time
    
    Args:
        latitude (float): latitude in decimal degrees
        longitude (float): longitude in decimal degrees
        depth (float): depth in meters
        day (float): day of the month
        month (float): month of the year
        year (float): year
    
    Returns:
        float, float, float, float, float, float, float, float, float, float, float, float, float, float: 7 elements (D, I, H, X, Y, Z, F) describing the main field, 7 elements (D, I, H, X, Y, Z, F) describing the rate of field change
    """
    global _getMagneticData_id
    if _getMagneticData_id is None:
        _getMagneticData_id = _client_service().register_static_object(('TechlogDatabase', 'getMagneticData'))
    return _client_service().call(_getMagneticData_id, *args, **kwargs)


_getMagneticDeclinationInclination_id = None
def getMagneticDeclinationInclination(*args, **kwargs):
    """
    getMagneticDeclinationInclination(latitude: float, longitude: float, depth: float, day: float, month: float, year: float) -> float, float
    
    Get magnetic declination and inclination at a defined location and time
    
    Args:
        latitude (float): latitude in decimal degrees
        longitude (float): longitude in decimal degrees
        depth (float): depth in meters
        day (float): day of the month
        month (float): month of the year
        year (float): year
    
    Returns:
        float, float: magnetic declination, inclination
    """
    global _getMagneticDeclinationInclination_id
    if _getMagneticDeclinationInclination_id is None:
        _getMagneticDeclinationInclination_id = _client_service().register_static_object(('TechlogDatabase', 'getMagneticDeclinationInclination'))
    return _client_service().call(_getMagneticDeclinationInclination_id, *args, **kwargs)


_getMethodList_id = None
def getMethodList(*args, **kwargs):
    """
    getMethodList() -> dict
    
    Return the Methods registered in TechlogOutput:
        dict: {MethodID : Method title}
    """
    global _getMethodList_id
    if _getMethodList_id is None:
        _getMethodList_id = _client_service().register_static_object(('TechlogDatabase', 'getMethodList'))
    return _client_service().call(_getMethodList_id, *args, **kwargs)


_getProject_id = None
def getProject(*args, **kwargs):
    """
    getProject() -> str
    
    Return the project entry point file (.tlp)
    
    Returns:
        str: project path
    """
    global _getProject_id
    if _getProject_id is None:
        _getProject_id = _client_service().register_static_object(('TechlogDatabase', 'getProject'))
    return _client_service().call(_getProject_id, *args, **kwargs)


_importAsciiArrayPolicy_id = None
def importAsciiArrayPolicy(*args, **kwargs):
    """
    importAsciiArrayPolicy() -> str
    
    Return the current ASCII array creation policy
    
    Returns:
        str: current ASCII array creation policy
    """
    global _importAsciiArrayPolicy_id
    if _importAsciiArrayPolicy_id is None:
        _importAsciiArrayPolicy_id = _client_service().register_static_object(('TechlogDatabase', 'importAsciiArrayPolicy'))
    return _client_service().call(_importAsciiArrayPolicy_id, *args, **kwargs)


_importAsciiArrayPolicyChange_id = None
def importAsciiArrayPolicyChange(*args, **kwargs):
    """
    importAsciiArrayPolicyChange(value: str) -> bool
    
    Set the import ASCII array creation policy
    
    Args:
        value (str): mode: {'create', 'add_epsilon', 'skip_line', 'duplicate_ref', 'ask', 'average'}
    
    Returns:
        bool: operation exit status
    """
    global _importAsciiArrayPolicyChange_id
    if _importAsciiArrayPolicyChange_id is None:
        _importAsciiArrayPolicyChange_id = _client_service().register_static_object(('TechlogDatabase', 'importAsciiArrayPolicyChange'))
    return _client_service().call(_importAsciiArrayPolicyChange_id, *args, **kwargs)


_importBufferClose_id = None
def importBufferClose(*args, **kwargs):
    """
    importBufferClose()
    
    Close the import buffer
    """
    global _importBufferClose_id
    if _importBufferClose_id is None:
        _importBufferClose_id = _client_service().register_static_object(('TechlogDatabase', 'importBufferClose'))
    return _client_service().call(_importBufferClose_id, *args, **kwargs)


_importBufferOpen_id = None
def importBufferOpen(*args, **kwargs):
    """
    importBufferOpen()
    
    Open the import buffer
    """
    global _importBufferOpen_id
    if _importBufferOpen_id is None:
        _importBufferOpen_id = _client_service().register_static_object(('TechlogDatabase', 'importBufferOpen'))
    return _client_service().call(_importBufferOpen_id, *args, **kwargs)


_importFile_id = None
def importFile(*args, **kwargs):
    """
    importFile(filePath: str, loadToTheBuffer: bool=False, codecName: str='', fileFormat: Any='', overwrite: bool=False, level: str='project', preserveGroup: bool=False) -> bool
    
    Import file into the project
    
    Args:
        filePath (str): file path
        loadToTheBuffer (bool): Optional; load into the import buffer
        codecName (str): Optional; codec name: {'CP-866', ...}
        fileFormat (Any): Optional; not used
        overwrite (bool): Optional; accept overwriting of files
        level (str): Optional; destination level if not imported to import buffer {'user', 'project', 'company'}
        preserveGroup (bool): Optional; preserve group position if anyOutput:
        bool: operation exit status
    """
    global _importFile_id
    if _importFile_id is None:
        _importFile_id = _client_service().register_static_object(('TechlogDatabase', 'importFile'))
    return _client_service().call(_importFile_id, *args, **kwargs)


_importProject_id = None
def importProject(*args, **kwargs):
    """
    importProject(projectPath: str) -> bool
    
    Import a project into the import buffer
    
    Args:
        projectPath (str): path of the project
    
    Returns:
        bool: operation exit status
    """
    global _importProject_id
    if _importProject_id is None:
        _importProject_id = _client_service().register_static_object(('TechlogDatabase', 'importProject'))
    return _client_service().call(_importProject_id, *args, **kwargs)


_importSegyMode_id = None
def importSegyMode(*args, **kwargs):
    """
    importSegyMode() -> str
    
    Return the current import SEGY mode
    
    Returns:
        str: current import SEGY mode
    """
    global _importSegyMode_id
    if _importSegyMode_id is None:
        _importSegyMode_id = _client_service().register_static_object(('TechlogDatabase', 'importSegyMode'))
    return _client_service().call(_importSegyMode_id, *args, **kwargs)


_importSegyModeChange_id = None
def importSegyModeChange(*args, **kwargs):
    """
    importSegyModeChange(value: str) -> bool
    
    Set the import SEGY mode
    
    Args:
        value (str): mode: {'auto', 'block', 'crossline', 'inline', 'wizard'}
    
    Returns:
        bool: operation exit status
    """
    global _importSegyModeChange_id
    if _importSegyModeChange_id is None:
        _importSegyModeChange_id = _client_service().register_static_object(('TechlogDatabase', 'importSegyModeChange'))
    return _client_service().call(_importSegyModeChange_id, *args, **kwargs)


_interactiveSelection_id = None
def interactiveSelection(*args, **kwargs):
    """
    interactiveSelection(wellName: str, datasetName: str) -> list
    
    Get the selection
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        list: selection list
    """
    global _interactiveSelection_id
    if _interactiveSelection_id is None:
        _interactiveSelection_id = _client_service().register_static_object(('TechlogDatabase', 'interactiveSelection'))
    return _client_service().call(_interactiveSelection_id, *args, **kwargs)


_interactiveSelectionChange_id = None
def interactiveSelectionChange(*args, **kwargs):
    """
    interactiveSelectionChange(wellName: str, datasetName: str, selectionList: list) -> bool
    
    Update the selection
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        selectionList (list): selection list
    
    Returns:
        bool: operation exit status
    """
    global _interactiveSelectionChange_id
    if _interactiveSelectionChange_id is None:
        _interactiveSelectionChange_id = _client_service().register_static_object(('TechlogDatabase', 'interactiveSelectionChange'))
    return _client_service().call(_interactiveSelectionChange_id, *args, **kwargs)


_isNameValid_id = None
def isNameValid(*args, **kwargs):
    """
    isNameValid(name: str, objectType: int=0) -> bool
    
    Check if a name is valid for a given type of object.
    
    Args:
        name (str): name to check
        objectType (int): Optional; {0=data(well, dataset, variable or group), 1=project, 2=databaseObject}
    
    Returns:
        bool: name validity
    """
    global _isNameValid_id
    if _isNameValid_id is None:
        _isNameValid_id = _client_service().register_static_object(('TechlogDatabase', 'isNameValid'))
    return _client_service().call(_isNameValid_id, *args, **kwargs)


_launchImportWizard_id = None
def launchImportWizard(*args, **kwargs):
    """
    launchImportWizard(fileName: str) -> bool
    
    Launch the import wizard
    
    Args:
        fileName (str): file name
    
    Returns:
        bool: operation exit status
    """
    global _launchImportWizard_id
    if _launchImportWizard_id is None:
        _launchImportWizard_id = _client_service().register_static_object(('TechlogDatabase', 'launchImportWizard'))
    return _client_service().call(_launchImportWizard_id, *args, **kwargs)


_listZonationFromWorkflowFile_id = None
def listZonationFromWorkflowFile(*args, **kwargs):
    """
    listZonationFromWorkflowFile(name: str, level: str='project') -> dict
    
    Return the AWI zonation dictionary
    
    Args:
        name (str): name of the workflowEntity
        level (str): Optional; object level: {'techlog', 'company', 'project', 'user'}
    
    Returns:
        dict: dictionary containing the zonation names as keys and the zones informations as value
    """
    global _listZonationFromWorkflowFile_id
    if _listZonationFromWorkflowFile_id is None:
        _listZonationFromWorkflowFile_id = _client_service().register_static_object(('TechlogDatabase', 'listZonationFromWorkflowFile'))
    return _client_service().call(_listZonationFromWorkflowFile_id, *args, **kwargs)


_loadZonationFromWorkflowFile_id = None
def loadZonationFromWorkflowFile(*args, **kwargs):
    """
    loadZonationFromWorkflowFile(name: str, level: str='project', overwrite: bool, zonationNames: dict) -> bool
    
    Return the AWI zonation dictionary
    
    Args:
        name (str): name of the workflowEntity
        level (str): Optional; object level: {'techlog', 'company', 'project', 'user'}
        overwrite (bool): overwrite existing zonation
        zonationNames (dict): mapping for the zonation names
    
    Returns:
        bool: true if succeed
    """
    global _loadZonationFromWorkflowFile_id
    if _loadZonationFromWorkflowFile_id is None:
        _loadZonationFromWorkflowFile_id = _client_service().register_static_object(('TechlogDatabase', 'loadZonationFromWorkflowFile'))
    return _client_service().call(_loadZonationFromWorkflowFile_id, *args, **kwargs)


_logFileName_id = None
def logFileName(*args, **kwargs):
    """
    logFileName()
    
    Gets the output file name where Techlog stores the current session's logs
    """
    global _logFileName_id
    if _logFileName_id is None:
        _logFileName_id = _client_service().register_static_object(('TechlogDatabase', 'logFileName'))
    return _client_service().call(_logFileName_id, *args, **kwargs)


_mainFamilyList_id = None
def mainFamilyList(*args, **kwargs):
    """
    mainFamilyList() -> list
    
    Return the list of known main families
    
    Returns:
        list: The list of known main families
    """
    global _mainFamilyList_id
    if _mainFamilyList_id is None:
        _mainFamilyList_id = _client_service().register_static_object(('TechlogDatabase', 'mainFamilyList'))
    return _client_service().call(_mainFamilyList_id, *args, **kwargs)


_markerAdd_id = None
def markerAdd(*args, **kwargs):
    """
    markerAdd(well: str, ds: str, depth: float, name: str) -> bool
    
    Add a marker
    
    Args:
        well (str): well
        ds (str): dataset
        depth (float): depth
        name (str): marker name
    
    Returns:
        bool: operation exit status
    """
    global _markerAdd_id
    if _markerAdd_id is None:
        _markerAdd_id = _client_service().register_static_object(('TechlogDatabase', 'markerAdd'))
    return _client_service().call(_markerAdd_id, *args, **kwargs)


_markerDelete_id = None
def markerDelete(*args, **kwargs):
    """
    markerDelete(well: str, dataset: str, markerName: str) -> bool
    
    Delete a marker
    
    Args:
        well (str): well
        dataset (str): dataset
        markerName (str): marker name
    
    Returns:
        bool: operation exit status
    """
    global _markerDelete_id
    if _markerDelete_id is None:
        _markerDelete_id = _client_service().register_static_object(('TechlogDatabase', 'markerDelete'))
    return _client_service().call(_markerDelete_id, *args, **kwargs)


_markerGet_id = None
def markerGet(*args, **kwargs):
    """
    markerGet(well: str, dataset: str, markerName: str) -> list
    
    Get a marker
    
    Args:
        well (str): well
        dataset (str): dataset
        markerName (str): marker name
    
    Returns:
        list: list of parameter dictionaries of the marker
    """
    global _markerGet_id
    if _markerGet_id is None:
        _markerGet_id = _client_service().register_static_object(('TechlogDatabase', 'markerGet'))
    return _client_service().call(_markerGet_id, *args, **kwargs)


_markerList_id = None
def markerList(*args, **kwargs):
    """
    markerList(well: str, dataset: str, family: str='', unit: str='') -> list
    
    Return the list of markers of a well
    
    Args:
        well (str): well
        dataset (str): dataset
        family (str): Optional; family name
        unit (str): Optional; unit name
    
    Returns:
        list: list of markers
    """
    global _markerList_id
    if _markerList_id is None:
        _markerList_id = _client_service().register_static_object(('TechlogDatabase', 'markerList'))
    return _client_service().call(_markerList_id, *args, **kwargs)


_markerSave_id = None
def markerSave(*args, **kwargs):
    """
    markerSave(well: str, dataset: str) -> bool
    
    Save the markers
    
    Args:
        well (str): well
        dataset (str): dataset
    
    Returns:
        bool: operation exit status
    """
    global _markerSave_id
    if _markerSave_id is None:
        _markerSave_id = _client_service().register_static_object(('TechlogDatabase', 'markerSave'))
    return _client_service().call(_markerSave_id, *args, **kwargs)


_markerToZonation_id = None
def markerToZonation(*args, **kwargs):
    """
    markerToZonation(wellName: str, datasetMarker: str, datasetZonationName: str, isUp: bool) -> bool
    
    Create a zonation dataset from a marker dataset
    
    Args:
        wellName (str): well name
        datasetMarker (str): dataset marker source
        datasetZonationName (str): new dataset zonation name
        isUp (bool): way : True=up, False=down
    
    Returns:
        bool: operation exit status
    """
    global _markerToZonation_id
    if _markerToZonation_id is None:
        _markerToZonation_id = _client_service().register_static_object(('TechlogDatabase', 'markerToZonation'))
    return _client_service().call(_markerToZonation_id, *args, **kwargs)


_measurementList_id = None
def measurementList(*args, **kwargs):
    """
    measurementList() -> list
    
    Return the list of known measurements
    
    Returns:
        list: The list of known measurements
    """
    global _measurementList_id
    if _measurementList_id is None:
        _measurementList_id = _client_service().register_static_object(('TechlogDatabase', 'measurementList'))
    return _client_service().call(_measurementList_id, *args, **kwargs)


_measurementUnit_id = None
def measurementUnit(*args, **kwargs):
    """
    measurementUnit(measurementName: str) -> str
    
    Default unit name for a given measurement in the current unit system
    
    Args:
        measurementName (str): measurement name
    
    Returns:
        str: unit name
    """
    global _measurementUnit_id
    if _measurementUnit_id is None:
        _measurementUnit_id = _client_service().register_static_object(('TechlogDatabase', 'measurementUnit'))
    return _client_service().call(_measurementUnit_id, *args, **kwargs)


_mergeDatasets_id = None
def mergeDatasets(*args, **kwargs):
    """
    mergeDatasets(well: str, datasetList: list, outputDatasetName: str, outputRefName: str, outputRefUnit: str, outputRefFamily: str, step: float, top: float, bottom: float) -> bool
    
    Combine and resize datasets
    
    Args:
        well (str): well name
        datasetList (list): input dataset list
        outputDatasetName (str): output dataset name
        outputRefName (str): output reference name
        outputRefUnit (str): output reference unit
        outputRefFamily (str): output reference family
        step (float): step increment value
        top (float): top depth value
        bottom (float): bottom depth value
    
    Returns:
        bool: operation exit status
    """
    global _mergeDatasets_id
    if _mergeDatasets_id is None:
        _mergeDatasets_id = _client_service().register_static_object(('TechlogDatabase', 'mergeDatasets'))
    return _client_service().call(_mergeDatasets_id, *args, **kwargs)


_mergeDateTimeDatasets_id = None
def mergeDateTimeDatasets(*args, **kwargs):
    """
    mergeDateTimeDatasets(well: str, datasetList: list, outputDatasetName: str, outputRefName: str, step: float, stepUnit: str, top: str, bottom: str) -> bool
    
    Combine and resize date time datasets
    
    Args:
        well (str): well name
        datasetList (list): input dataset list
        outputDatasetName (str): output dataset name
        outputRefName (str): output reference name
        step (float): step increment value
        stepUnit (str): step unit
        top (str): start value
        bottom (str): end value
    
    Returns:
        bool: operation exit status
    """
    global _mergeDateTimeDatasets_id
    if _mergeDateTimeDatasets_id is None:
        _mergeDateTimeDatasets_id = _client_service().register_static_object(('TechlogDatabase', 'mergeDateTimeDatasets'))
    return _client_service().call(_mergeDateTimeDatasets_id, *args, **kwargs)


_multiWellCreate_id = None
def multiWellCreate(*args, **kwargs):
    """
    multiWellCreate(wellName: str, datasetName: str, wellSourceName: str, datasetSourceName: str, variableList: list, referenceVaribaleNameList: str, referenceVariableNameUnit: str='', mode: int=1) -> bool
    
    Create a multi well dataset
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        wellSourceName (str): well source name
        datasetSourceName (str): dataset source name
        variableList (list): variable list
        referenceVaribaleNameList (str): reference variable name list
        referenceVariableNameUnit (str): Optional; reference variable unit
        mode (int): Optional; mode: {0=create, 1=create and fill, 2=update}
    
    Returns:
        bool: operation exit status
    """
    global _multiWellCreate_id
    if _multiWellCreate_id is None:
        _multiWellCreate_id = _client_service().register_static_object(('TechlogDatabase', 'multiWellCreate'))
    return _client_service().call(_multiWellCreate_id, *args, **kwargs)


_objectAddZonation_id = None
def objectAddZonation(*args, **kwargs):
    """
    objectAddZonation(winId: int, zonation: str, listzone: list=None) -> bool
    
    Change AWI zonation
    
    Args:
        winId (int): identifier of the widget.
        zonation (str): zonation name
        listzone (list): Optional; list of zone names
    
    Returns:
        bool: operation exit status
    """
    global _objectAddZonation_id
    if _objectAddZonation_id is None:
        _objectAddZonation_id = _client_service().register_static_object(('TechlogDatabase', 'objectAddZonation'))
    return _client_service().call(_objectAddZonation_id, *args, **kwargs)


_objectApply_id = None
def objectApply(*args, **kwargs):
    """
    objectApply(wid: int, waitForEnd: bool=False)
    
    Call <i>apply</i> on the opened object
    
    Args:
        wid (int): window ID
        waitForEnd (bool): Optional; wait until end apply
    
    Returns:
        NoneType: None if wrong argument,
        bool: False if window not found,
        list: List of ids of created widgets if successful
    """
    global _objectApply_id
    if _objectApply_id is None:
        _objectApply_id = _client_service().register_static_object(('TechlogDatabase', 'objectApply'))
    return _client_service().call(_objectApply_id, *args, **kwargs)


_objectApplyMode_id = None
def objectApplyMode(*args, **kwargs):
    """
    objectApplyMode(wid: int) -> int
    
    Return the apply mode of the method
    
    Args:
        wid (int): id of the workflow widget
    
    Returns:
        int: Apply mode of the method
    """
    global _objectApplyMode_id
    if _objectApplyMode_id is None:
        _objectApplyMode_id = _client_service().register_static_object(('TechlogDatabase', 'objectApplyMode'))
    return _client_service().call(_objectApplyMode_id, *args, **kwargs)


_objectApplyModeChange_id = None
def objectApplyModeChange(*args, **kwargs):
    """
    objectApplyModeChange(arg: int, arg: int) -> bool
    
    Change the apply mode
    
    Args:
        arg_1 (int): window object id
        arg_2 (int): apply mode {0='Display', 1='Save', 2='Save & display'}
    
    Returns:
        bool: operation exit status
    """
    global _objectApplyModeChange_id
    if _objectApplyModeChange_id is None:
        _objectApplyModeChange_id = _client_service().register_static_object(('TechlogDatabase', 'objectApplyModeChange'))
    return _client_service().call(_objectApplyModeChange_id, *args, **kwargs)


_objectClose_id = None
def objectClose(*args, **kwargs):
    """
    objectClose(winid: int, save: bool=True) -> bool
    
    Close the object
    
    Args:
        winid (int): window object id
        save (bool): Optional; specify if you wanted to save or not
    
    Returns:
        bool: operation exit status
    """
    global _objectClose_id
    if _objectClose_id is None:
        _objectClose_id = _client_service().register_static_object(('TechlogDatabase', 'objectClose'))
    return _client_service().call(_objectClose_id, *args, **kwargs)


_objectCopy_id = None
def objectCopy(*args, **kwargs):
    """
    objectCopy(object, object, source, destination, delete, overwrite: bool=False) -> bool
    
    Copy the object from a project to another project
    
    Args:
        object (None): name[str]: object name
        object (None): type[str]: object type
        source (None): project[str]: source project
        destination (None): project[str]: dest project
        delete (None): after copy[bool][=False]: Remove source after copy
        overwrite (bool): Optional; overwrite the destination if it already exists
    
    Returns:
        bool: operation exit status
    """
    global _objectCopy_id
    if _objectCopy_id is None:
        _objectCopy_id = _client_service().register_static_object(('TechlogDatabase', 'objectCopy'))
    return _client_service().call(_objectCopy_id, *args, **kwargs)


_objectCreate_id = None
def objectCreate(*args, **kwargs):
    """
    objectCreate(type: str, name: str, level: str='project', displayAssignment: bool=False) -> int
    
    Add a Python script as a method to the current workflow (create a new workflow if necessary).
    Remark: The type is either the string or its index in the objectTypeList().
    
    Args:
        type (str): type of the object to open (must be 'PythonScript')
        name (str): name of the object
        level (str): Optional; object level: {'techlog', 'company', 'project', 'user'}
        displayAssignment (bool): Optional; display the data type assignment window
    
    Returns:
        int: identifier of the widget
    """
    global _objectCreate_id
    if _objectCreate_id is None:
        _objectCreate_id = _client_service().register_static_object(('TechlogDatabase', 'objectCreate'))
    return _client_service().call(_objectCreate_id, *args, **kwargs)


_objectDelAllZone_id = None
def objectDelAllZone(*args, **kwargs):
    """
    objectDelAllZone(winId: int) -> bool
    
    Remove AWI zonation
    
    Args:
        winId (int): identifier of the widget
    
    Returns:
        bool: operation exit status
    """
    global _objectDelAllZone_id
    if _objectDelAllZone_id is None:
        _objectDelAllZone_id = _client_service().register_static_object(('TechlogDatabase', 'objectDelAllZone'))
    return _client_service().call(_objectDelAllZone_id, *args, **kwargs)


_objectDelete_id = None
def objectDelete(*args, **kwargs):
    """
    objectDelete(object, object, project: str='Project') -> bool
    
    Delete the object from the project
    
    Args:
        object (None): name[str]: object name
        object (None): type[str]: object type
        project (str): Optional; project
    
    Returns:
        bool: operation exit status
    """
    global _objectDelete_id
    if _objectDelete_id is None:
        _objectDelete_id = _client_service().register_static_object(('TechlogDatabase', 'objectDelete'))
    return _client_service().call(_objectDelete_id, *args, **kwargs)


_objectExistes_id = None
def objectExistes(*args, **kwargs):
    """
    objectExistes(name: str, type: int, level: str) -> bool
    
    [Deprecated] Use objectExists instead.
    
    Args:
        name (str): object name
        type (int): object type
        level (str): object level: {'techlog', 'company', 'project', 'user'}
    
    Returns:
        bool: object exists
    """
    global _objectExistes_id
    if _objectExistes_id is None:
        _objectExistes_id = _client_service().register_static_object(('TechlogDatabase', 'objectExistes'))
    return _client_service().call(_objectExistes_id, *args, **kwargs)


_objectExists_id = None
def objectExists(*args, **kwargs):
    """
    objectExists(name: str, type: int, level: str) -> bool
    
    Object exists
    
    Args:
        name (str): object name
        type (int): object type
        level (str): object level: {'techlog', 'company', 'project', 'user'}
    
    Returns:
        bool: object exists
    """
    global _objectExists_id
    if _objectExists_id is None:
        _objectExists_id = _client_service().register_static_object(('TechlogDatabase', 'objectExists'))
    return _client_service().call(_objectExists_id, *args, **kwargs)


_objectIsOpened_id = None
def objectIsOpened(*args, **kwargs):
    """
    objectIsOpened(wid: int) -> bool
    
    Test if object is opened
    
    Args:
        wid (int): window ID
    
    Returns:
        bool: operation exit status
    """
    global _objectIsOpened_id
    if _objectIsOpened_id is None:
        _objectIsOpened_id = _client_service().register_static_object(('TechlogDatabase', 'objectIsOpened'))
    return _client_service().call(_objectIsOpened_id, *args, **kwargs)


_objectList_id = None
def objectList(*args, **kwargs):
    """
    objectList(object, project: str='Project') -> list
    
    Return the object list with a given type
    
    Args:
        object (None): type[str]: object type
        project (str): Optional; project
    
    Returns:
        list: The object list
    """
    global _objectList_id
    if _objectList_id is None:
        _objectList_id = _client_service().register_static_object(('TechlogDatabase', 'objectList'))
    return _client_service().call(_objectList_id, *args, **kwargs)


_objectManagerSetWorkflow_id = None
def objectManagerSetWorkflow(*args, **kwargs):
    """
    objectManagerSetWorkflow(winid: int, workflow: str) -> bool
    
    Set the focus on the workflow for the manager
    
    Args:
        winid (int): window ID
        workflow (str): workflow name
    
    Returns:
        bool: operation exit status
    """
    global _objectManagerSetWorkflow_id
    if _objectManagerSetWorkflow_id is None:
        _objectManagerSetWorkflow_id = _client_service().register_static_object(('TechlogDatabase', 'objectManagerSetWorkflow'))
    return _client_service().call(_objectManagerSetWorkflow_id, *args, **kwargs)


# objectOpen has several signatures, so it's hard to provide proper default
# argument. So we just forward everything.
_objectOpen_id = None
def objectOpen(*args, **kwargs) -> int:
    """
    objectOpen(name: str, newWorkspace: str, level: str='project', newWorkspace: bool=False, wellName: str='', datasetName: str='') -> int
    
    Open the object.
    See also: objectCreate()
    Remark: The type is either the string or its index in the objectTypeList().
    
    Args:
        name (str): type of the object to open (available types are listed in objectTypeList())
        newWorkspace (str): name of the object
        level (str): Optional; object level: {'techlog', 'company', 'project', 'user'}
        newWorkspace (bool): Optional; open in a new workspace
        wellName (str): Optional; well to use if the object is a Python script
        datasetName (str): Optional; dataset to use if the object is a Python script
    
    Returns:
        int: identifier of the widget
    """

    _raiseIfPyWERelaxed()

    global _objectOpen_id
    if _objectOpen_id is None:
        _objectOpen_id = _client_service().register_static_object(('TechlogDatabase', 'objectOpen'))
    return _client_service().call(_objectOpen_id, *args, **kwargs)


# TODO: resampling


_objectPrefixAndSuffix_id = None
def objectPrefixAndSuffix(*args, **kwargs):
    """
    objectPrefixAndSuffix(winId: int, prefix: str, suffix: str) -> bool
    
    Change AWI outputs prefix and suffix
    
    Args:
        winId (int): identifier of the widget
        prefix (str): name prefix
        suffix (str): name suffix
    
    Returns:
        bool: operation exit status
    """
    global _objectPrefixAndSuffix_id
    if _objectPrefixAndSuffix_id is None:
        _objectPrefixAndSuffix_id = _client_service().register_static_object(('TechlogDatabase', 'objectPrefixAndSuffix'))
    return _client_service().call(_objectPrefixAndSuffix_id, *args, **kwargs)


_objectPythonAWIPropertyChange_id = None
def objectPythonAWIPropertyChange(*args, **kwargs):
    """
    objectPythonAWIPropertyChange(winId: int, propertyName: str, value: str)
    
    Set a python property.
    
    Args:
        winId (int): window ID
        propertyName (str): name of the property
        value (str): the value to set
    
    Returns:
        None: None
    """
    global _objectPythonAWIPropertyChange_id
    if _objectPythonAWIPropertyChange_id is None:
        _objectPythonAWIPropertyChange_id = _client_service().register_static_object(('TechlogDatabase', 'objectPythonAWIPropertyChange'))
    return _client_service().call(_objectPythonAWIPropertyChange_id, *args, **kwargs)


_objectSave_id = None
def objectSave(*args, **kwargs):
    """
    objectSave(objectId: int, objectName: str) -> bool
    
    Save the object
    
    Args:
        objectId (int): object id
        objectName (str): object name
    
    Returns:
        bool: operation exit status
    """
    global _objectSave_id
    if _objectSave_id is None:
        _objectSave_id = _client_service().register_static_object(('TechlogDatabase', 'objectSave'))
    return _client_service().call(_objectSave_id, *args, **kwargs)


_objectSaveResultSummaries_id = None
def objectSaveResultSummaries(*args, **kwargs):
    """
    objectSaveResultSummaries(arg: int) -> bool
    
    Save summaries result in zonation dataset
    
    Args:
        arg_1 (int): window ID
    
    Returns:
        bool: operation exit status
    """
    global _objectSaveResultSummaries_id
    if _objectSaveResultSummaries_id is None:
        _objectSaveResultSummaries_id = _client_service().register_static_object(('TechlogDatabase', 'objectSaveResultSummaries'))
    return _client_service().call(_objectSaveResultSummaries_id, *args, **kwargs)


_objectSetRealTime_id = None
def objectSetRealTime(*args, **kwargs):
    """
    objectSetRealTime(workflowId: int, mode: bool) -> bool
    
    Set the real time mode for a workflow
    
    Args:
        workflowId (int): id of the workflow
        mode (bool): True for activate the realtime, False else
    
    Returns:
        bool: operation exit status
    """
    global _objectSetRealTime_id
    if _objectSetRealTime_id is None:
        _objectSetRealTime_id = _client_service().register_static_object(('TechlogDatabase', 'objectSetRealTime'))
    return _client_service().call(_objectSetRealTime_id, *args, **kwargs)


_objectSetWorkflowCurrentMethod_id = None
def objectSetWorkflowCurrentMethod(*args, **kwargs):
    """
    objectSetWorkflowCurrentMethod(wid: int, type: int) -> bool
    
    Define the current method in a workflow
    
    Args:
        wid (int): window ID
        type (int): method position
    
    Returns:
        bool: operation exit status
    """
    global _objectSetWorkflowCurrentMethod_id
    if _objectSetWorkflowCurrentMethod_id is None:
        _objectSetWorkflowCurrentMethod_id = _client_service().register_static_object(('TechlogDatabase', 'objectSetWorkflowCurrentMethod'))
    return _client_service().call(_objectSetWorkflowCurrentMethod_id, *args, **kwargs)


_objectTypeList_id = None
def objectTypeList(*args, **kwargs):
    """
    objectTypeList() -> list
    
    Return the object type list
    
    Returns:
        list: The list of the object types
    """
    global _objectTypeList_id
    if _objectTypeList_id is None:
        _objectTypeList_id = _client_service().register_static_object(('TechlogDatabase', 'objectTypeList'))
    return _client_service().call(_objectTypeList_id, *args, **kwargs)


_objectWorkflowIncludeMissingValue_id = None
def objectWorkflowIncludeMissingValue(*args, **kwargs):
    """
    objectWorkflowIncludeMissingValue(wid: int, include: bool) -> bool
    
    Include MissingValues when running scripts in the workflow
    
    Args:
        wid (int): window ID
        include (bool): include the MissingValues
    
    Returns:
        bool: operation exit status
    """
    global _objectWorkflowIncludeMissingValue_id
    if _objectWorkflowIncludeMissingValue_id is None:
        _objectWorkflowIncludeMissingValue_id = _client_service().register_static_object(('TechlogDatabase', 'objectWorkflowIncludeMissingValue'))
    return _client_service().call(_objectWorkflowIncludeMissingValue_id, *args, **kwargs)


_objectWorkflowLayoutTemplateChange_id = None
def objectWorkflowLayoutTemplateChange(*args, **kwargs):
    """
    objectWorkflowLayoutTemplateChange(template: str, force: bool=False) -> bool
    
    Change workflow layout template properties for selected method
    
    Args:
        template (str): {'None', 'Current', 'Default'} or named template 'level\\name'
        force (bool): Optional; force template mode
    
    Returns:
        bool: operation exit status
    """
    global _objectWorkflowLayoutTemplateChange_id
    if _objectWorkflowLayoutTemplateChange_id is None:
        _objectWorkflowLayoutTemplateChange_id = _client_service().register_static_object(('TechlogDatabase', 'objectWorkflowLayoutTemplateChange'))
    return _client_service().call(_objectWorkflowLayoutTemplateChange_id, *args, **kwargs)


_objectWorkflowMethodsNames_id = None
def objectWorkflowMethodsNames(*args, **kwargs):
    """
    objectWorkflowMethodsNames(wid: int) -> list
    
    Get the list of methods names from a workflow
    
    Args:
        wid (int): window ID
    
    Returns:
        list: list of methods names
    """
    global _objectWorkflowMethodsNames_id
    if _objectWorkflowMethodsNames_id is None:
        _objectWorkflowMethodsNames_id = _client_service().register_static_object(('TechlogDatabase', 'objectWorkflowMethodsNames'))
    return _client_service().call(_objectWorkflowMethodsNames_id, *args, **kwargs)


_objectWorkflowSaveEmptyOutputs_id = None
def objectWorkflowSaveEmptyOutputs(*args, **kwargs):
    """
    objectWorkflowSaveEmptyOutputs(wid: int, save: bool) -> bool
    
    Save empty outputs when running scripts in the workflow
    
    Args:
        wid (int): window ID
        save (bool): save the empty outputs
    
    Returns:
        bool: operation exit status
    """
    global _objectWorkflowSaveEmptyOutputs_id
    if _objectWorkflowSaveEmptyOutputs_id is None:
        _objectWorkflowSaveEmptyOutputs_id = _client_service().register_static_object(('TechlogDatabase', 'objectWorkflowSaveEmptyOutputs'))
    return _client_service().call(_objectWorkflowSaveEmptyOutputs_id, *args, **kwargs)


_openMethod_id = None
def openMethod(*args, **kwargs):
    """
    openMethod(methodId: str, openWithMnemonics: bool, forceMnemoPreinitialisation: bool) -> int
    
    Open AWI Method from it Id.
     Use getMethodList method to get All method Id
    
    Args:
        methodId (str): Method identifier
        openWithMnemonics (bool): True by default
            if the family selection widow need to be shown
        forceMnemoPreinitialisation (bool): False by default.
            Can lead to crash if the family selection is hidden and not initialized.
    
    Returns:
        int: winId (identifier of the widget), -1 if the method is not opened
    """
    global _openMethod_id
    if _openMethod_id is None:
        _openMethod_id = _client_service().register_static_object(('TechlogDatabase', 'openMethod'))
    return _client_service().call(_openMethod_id, *args, **kwargs)


_openProject_id = None
def openProject(*args, **kwargs):
    """
    openProject(project: str, silent: bool=False) -> bool
    
    Close the current project and open the new project
    
    Args:
        project (str): project entry point file (.tlp)
        silent (bool): Optional; display pop-up or not
    
    Returns:
        bool: operation exit status
    """
    global _openProject_id
    if _openProject_id is None:
        _openProject_id = _client_service().register_static_object(('TechlogDatabase', 'openProject'))
    return _client_service().call(_openProject_id, *args, **kwargs)


_parameterCreate_id = None
def parameterCreate(*args, **kwargs):
    """
    parameterCreate(name: str, well: str='*', dataSet: str='*', zonation: str='*', zone: str='*', group: str='-9999', value: str='-9999', min: float=-9999, max: float=-9999, unit: str='') -> int
    
    Add parameter to database
    
    Args:
        name (str): name of the parameter
        well (str): Optional; well name
        dataSet (str): Optional; dataset name
        zonation (str): Optional; zonation name
        zone (str): Optional; zone name
        group (str): Optional; group name
        value (str): Optional; value of the parameter
        min (float): Optional; minimum value authorized
        max (float): Optional; maximum value authorized
        unit (str): Optional; unit of the parameter
    
    Returns:
        int: id of the inserted parameter, -1 if it was not inserted
    """
    global _parameterCreate_id
    if _parameterCreate_id is None:
        _parameterCreate_id = _client_service().register_static_object(('TechlogDatabase', 'parameterCreate'))
    return _client_service().call(_parameterCreate_id, *args, **kwargs)


_parameterDictAWIChange_id = None
def parameterDictAWIChange(*args, **kwargs):
    """
    parameterDictAWIChange(winID: int, paramDict: dict) -> bool
    
    Change AWI parameter dictionary
    
    Args:
        winID (int): identifier of the widget
        paramDict (dict): parameter dictionary
    
    Returns:
        bool: operation exit status
    """
    global _parameterDictAWIChange_id
    if _parameterDictAWIChange_id is None:
        _parameterDictAWIChange_id = _client_service().register_static_object(('TechlogDatabase', 'parameterDictAWIChange'))
    return _client_service().call(_parameterDictAWIChange_id, *args, **kwargs)


_parameterDictFromAWI_id = None
def parameterDictFromAWI(*args, **kwargs):
    """
    parameterDictFromAWI(winID: int) -> dict
    
    Return the parameter dictionary from AWI
    
    Args:
        winID (int): identifier of the widget
    
    Returns:
        dict: parameter dictionary
    """
    global _parameterDictFromAWI_id
    if _parameterDictFromAWI_id is None:
        _parameterDictFromAWI_id = _client_service().register_static_object(('TechlogDatabase', 'parameterDictFromAWI'))
    return _client_service().call(_parameterDictFromAWI_id, *args, **kwargs)


_parameterDictFromFile_id = None
def parameterDictFromFile(*args, **kwargs):
    """
    parameterDictFromFile(path: str) -> dict
    
    Read the parameter dictionary from file
    
    Args:
        path (str): filePath and fileName
    
    Returns:
        dict: parameter Dictionary
    """
    global _parameterDictFromFile_id
    if _parameterDictFromFile_id is None:
        _parameterDictFromFile_id = _client_service().register_static_object(('TechlogDatabase', 'parameterDictFromFile'))
    return _client_service().call(_parameterDictFromFile_id, *args, **kwargs)


_parameterDictFromFileChange_id = None
def parameterDictFromFileChange(*args, **kwargs):
    """
    parameterDictFromFileChange(paraDict: dict, path: str) -> bool
    
    Save parameter dictionary to file
    
    Args:
        paraDict (dict): parameter dictionary
        path (str): filePath and fileName
    
    Returns:
        bool: operation exit status
    """
    global _parameterDictFromFileChange_id
    if _parameterDictFromFileChange_id is None:
        _parameterDictFromFileChange_id = _client_service().register_static_object(('TechlogDatabase', 'parameterDictFromFileChange'))
    return _client_service().call(_parameterDictFromFileChange_id, *args, **kwargs)


_parameterDictFromPythonEditor_id = None
def parameterDictFromPythonEditor(*args, **kwargs):
    """
    parameterDictFromPythonEditor(winID: int) -> dict
    
    Return the parameter dictionary from the Python Editor
    
    Args:
        winID (int): identifier of the widget.
    
    Returns:
        dict: parameters dictionary
    """
    global _parameterDictFromPythonEditor_id
    if _parameterDictFromPythonEditor_id is None:
        _parameterDictFromPythonEditor_id = _client_service().register_static_object(('TechlogDatabase', 'parameterDictFromPythonEditor'))
    return _client_service().call(_parameterDictFromPythonEditor_id, *args, **kwargs)


_parameterDictPythonEditorChange_id = None
def parameterDictPythonEditorChange(*args, **kwargs):
    """
    parameterDictPythonEditorChange(winID: int, paramDict: dict) -> bool
    
    Change Python Editor parameter dictionary
    
    Args:
        winID (int): identifier of the widget
        paramDict (dict): parameter dictionary
    
    Returns:
        bool: operation exit status
    """
    global _parameterDictPythonEditorChange_id
    if _parameterDictPythonEditorChange_id is None:
        _parameterDictPythonEditorChange_id = _client_service().register_static_object(('TechlogDatabase', 'parameterDictPythonEditorChange'))
    return _client_service().call(_parameterDictPythonEditorChange_id, *args, **kwargs)


_parameterId_id = None
def parameterId(*args, **kwargs):
    """
    parameterId(name: str, well: str=None, dataset: str=None, zonation: str=None, zone: str=None) -> int
    
    Returns the parameter's id having the specified criteria
    
    Args:
        name (str): parameter name
        well (str): Optional; well name
        dataset (str): Optional; dataset name
        zonation (str): Optional; zonation name
        zone (str): Optional; zone name
    
    Returns:
        int: id of parameter. Returns None if no parameter found
    """
    global _parameterId_id
    if _parameterId_id is None:
        _parameterId_id = _client_service().register_static_object(('TechlogDatabase', 'parameterId'))
    return _client_service().call(_parameterId_id, *args, **kwargs)


_parameterInputAWIChange_id = None
def parameterInputAWIChange(*args, **kwargs):
    """
    parameterInputAWIChange(winId: int, wellName: str, datasetName: str, dict: dict) -> bool
    
    Change AWI inputs parameters
    
    Args:
        winId (int): identifier of the widget
        wellName (str): well name
        datasetName (str): dataset name
        dict (dict): dictionary of all inputs variables
    
    Returns:
        bool: operation exit status
    """
    global _parameterInputAWIChange_id
    if _parameterInputAWIChange_id is None:
        _parameterInputAWIChange_id = _client_service().register_static_object(('TechlogDatabase', 'parameterInputAWIChange'))
    return _client_service().call(_parameterInputAWIChange_id, *args, **kwargs)


_parameterListId_id = None
def parameterListId(*args, **kwargs):
    """
    parameterListId(name: str, well: str='', dataset: str='', zonation: str='', zone: str='', group: str='') -> list
    
    Returns the list of IDs of parameters corresponding to the search criteria
    
    Args:
        name (str): parameter name
        well (str): Optional; well name
        dataset (str): Optional; dataset name
        zonation (str): Optional; zonation name
        zone (str): Optional; zone name
        group (str): Optional; group name
    
    Returns:
        list: list of id. Returns None if the list is empty
    """
    global _parameterListId_id
    if _parameterListId_id is None:
        _parameterListId_id = _client_service().register_static_object(('TechlogDatabase', 'parameterListId'))
    return _client_service().call(_parameterListId_id, *args, **kwargs)


_parameterValue_id = None
def parameterValue(*args, **kwargs):
    """
    parameterValue(paramId: int, ok: str='') -> float
    
    Get the value of parameter with parameter id
    
    Args:
        paramId (int): parameter id
        ok (str): Optional; convert the parameter value into this unit
    
    Returns:
        float: parameter value. Returns None if no value found or the parameter id does not exist
    """
    global _parameterValue_id
    if _parameterValue_id is None:
        _parameterValue_id = _client_service().register_static_object(('TechlogDatabase', 'parameterValue'))
    return _client_service().call(_parameterValue_id, *args, **kwargs)


_parameterValueChange_id = None
def parameterValueChange(*args, **kwargs):
    """
    parameterValueChange(paramId: int, value: float, unit: str='') -> bool
    
    Set parameter's value in database
    
    Args:
        paramId (int): parameter id
        value (float): parameter value
        unit (str): Optional; the unit to which value will be converted
    
    Returns:
        bool: operation status
    """
    global _parameterValueChange_id
    if _parameterValueChange_id is None:
        _parameterValueChange_id = _client_service().register_static_object(('TechlogDatabase', 'parameterValueChange'))
    return _client_service().call(_parameterValueChange_id, *args, **kwargs)


_parameterValueFromAWI_id = None
def parameterValueFromAWI(*args, **kwargs):
    """
    parameterValueFromAWI(winId: int, wellName: str, datasetName: str, zoneName: str) -> dict
    
    Return the AWI parameter (true AWI value) dictionary
    
    Args:
        winId (int): identifier of the widget
        wellName (str): well name
        datasetName (str): dataset name
        zoneName (str): zonation name
    
    Returns:
        dict: parameter (true AWI value) dictionary
    """
    global _parameterValueFromAWI_id
    if _parameterValueFromAWI_id is None:
        _parameterValueFromAWI_id = _client_service().register_static_object(('TechlogDatabase', 'parameterValueFromAWI'))
    return _client_service().call(_parameterValueFromAWI_id, *args, **kwargs)


_parameterVariableFromAWI_id = None
def parameterVariableFromAWI(*args, **kwargs):
    """
    parameterVariableFromAWI(winId: int, wellName: str, datasetName: str) -> dict
    
    Return the AWI inputs variable dictionary
    
    Args:
        winId (int): identifier of the widget
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        dict: inputs dictionary
    """
    global _parameterVariableFromAWI_id
    if _parameterVariableFromAWI_id is None:
        _parameterVariableFromAWI_id = _client_service().register_static_object(('TechlogDatabase', 'parameterVariableFromAWI'))
    return _client_service().call(_parameterVariableFromAWI_id, *args, **kwargs)


_parameterZonationFromAWI_id = None
def parameterZonationFromAWI(*args, **kwargs):
    """
    parameterZonationFromAWI(winId: int, wellName: str, datasetName: str, zoneName: str) -> dict
    
    Return the AWI zonation dictionary
    
    Args:
        winId (int): identifier of the widget
        wellName (str): well name
        datasetName (str): dataset name
        zoneName (str): zonation name
    
    Returns:
        dict: zonation dictionary
    """
    global _parameterZonationFromAWI_id
    if _parameterZonationFromAWI_id is None:
        _parameterZonationFromAWI_id = _client_service().register_static_object(('TechlogDatabase', 'parameterZonationFromAWI'))
    return _client_service().call(_parameterZonationFromAWI_id, *args, **kwargs)


_parametersLoad_id = None
def parametersLoad(*args, **kwargs):
    """
    parametersLoad(pathname: str, fileName: str, listZones: str='', listParams: str='') -> bool
    
    Loads parameters from xml file
    
    Args:
        pathname (str): path of the file you want to load
        fileName (str): fileName
        listZones (str): Optional; the zones to filter on
        listParams (str): Optional; the names of parameters to filter on
    
    Returns:
        bool: True if the loading process has been successfully performed. False otherwise
    """
    global _parametersLoad_id
    if _parametersLoad_id is None:
        _parametersLoad_id = _client_service().register_static_object(('TechlogDatabase', 'parametersLoad'))
    return _client_service().call(_parametersLoad_id, *args, **kwargs)


_parametersSave_id = None
def parametersSave(*args, **kwargs):
    """
    parametersSave(dict: dict) -> bool
    
    Save a parameter dictionary
    
    Args:
        dict (dict): dictionary of parameters
    
    Returns:
        bool: operation exit status
    """
    global _parametersSave_id
    if _parametersSave_id is None:
        _parametersSave_id = _client_service().register_static_object(('TechlogDatabase', 'parametersSave'))
    return _client_service().call(_parametersSave_id, *args, **kwargs)


_parametersSaveXML_id = None
def parametersSaveXML(*args, **kwargs):
    """
    parametersSaveXML(oldFileName: str, newParamFile: str, pathName: str, xmlkey: str, level: int, paramLevel: int, listWells: list=None, datasetList: list=None, zonation: str=None, paramNames: list=None, listZones: list=None) -> bool
    
    Save data in xml file
    
    Args:
        oldFileName (str): oldFileName
        newParamFile (str): newParamFile
        pathName (str): pathName
        xmlkey (str): xmlKey
        level (int): level
        paramLevel (int): paramLevel
        listWells (list): Optional; listWells
        datasetList (list): Optional; datasetList
        zonation (str): Optional; zonation
        paramNames (list): Optional; paramNames
        listZones (list): Optional; listZones
    
    Returns:
        bool: operation exit status
    """
    global _parametersSaveXML_id
    if _parametersSaveXML_id is None:
        _parametersSaveXML_id = _client_service().register_static_object(('TechlogDatabase', 'parametersSaveXML'))
    return _client_service().call(_parametersSaveXML_id, *args, **kwargs)


_progressBarHide_id = None
def progressBarHide(*args, **kwargs):
    """
    progressBarHide()
    
    Hide the progress bar
    """
    global _progressBarHide_id
    if _progressBarHide_id is None:
        _progressBarHide_id = _client_service().register_static_object(('TechlogDatabase', 'progressBarHide'))
    return _client_service().call(_progressBarHide_id, *args, **kwargs)


_progressBarSetAutoProgress_id = None
def progressBarSetAutoProgress(*args, **kwargs):
    """
    progressBarSetAutoProgress(auto: bool) -> bool
    
    Enable or disable automatic-update of progress bar in LOOP inside workflow engine
    Do nothing outside workflow engine
    
    Args:
        auto (bool): enable or disable automatic progress
    
    Returns:
        bool: operation exit status (False outside workflow engine)
    """
    global _progressBarSetAutoProgress_id
    if _progressBarSetAutoProgress_id is None:
        _progressBarSetAutoProgress_id = _client_service().register_static_object(('TechlogDatabase', 'progressBarSetAutoProgress'))
    return _client_service().call(_progressBarSetAutoProgress_id, *args, **kwargs)


_cache_progress_bar_value = None
_progressBarSetValue_id = None
#suppose that there is one and a unique one progress bar in Techlog, which is likely to be the case (except WE case)
def progressBarSetValue(value: float, autoShow: bool=False, information: str=""):
    """
    progressBarSetValue(value: float, autoShow: bool=False, information: str='') -> bool
    
    Change progress bar value
    
    Args:
        value (float): percent of progressBar
        autoShow (bool): Optional; auto hide and show
        information (str): Optional; set progress bar title
    
    Returns:
        bool: operation exit status
    """
    global _cache_progress_bar_value
    global _progressBarSetValue_id

    #this assert may break scripts. I believe it's better to fix the script than returning False
    assert(isinstance(value,(int,float))), "value is neither of type int or of type float"

    rounded_value = round(value)
    if rounded_value == _cache_progress_bar_value:
        return True #for compatibility behaviour.

    _cache_progress_bar_value = rounded_value

    if _progressBarSetValue_id is None:
        _progressBarSetValue_id = _client_service().register_static_object(('TechlogDatabase', 'progressBarSetValue'))
    return _client_service().call(_progressBarSetValue_id, _cache_progress_bar_value, autoShow, information)


_progressBarSetVisible_id = None
def progressBarSetVisible(*args, **kwargs):
    """
    progressBarSetVisible(visible: bool) -> bool
    
    Change progress bar visible status
    
    Args:
        visible (bool): progress bar visibility status
    
    Returns:
        bool: operation exit status
    """
    global _progressBarSetVisible_id
    if _progressBarSetVisible_id is None:
        _progressBarSetVisible_id = _client_service().register_static_object(('TechlogDatabase', 'progressBarSetVisible'))
    return _client_service().call(_progressBarSetVisible_id, *args, **kwargs)


_progressBarShow_id = None
def progressBarShow(*args, **kwargs):
    """
    progressBarShow()
    
    Show progress bar in the status bar
    """
    global _progressBarShow_id
    if _progressBarShow_id is None:
        _progressBarShow_id = _client_service().register_static_object(('TechlogDatabase', 'progressBarShow'))
    return _client_service().call(_progressBarShow_id, *args, **kwargs)


_projectBrowserApplyFilter_id = None
def projectBrowserApplyFilter(*args, **kwargs):
    """
    projectBrowserApplyFilter(filterName: str, projectLevel: str='Project') -> bool
    
    Apply filter on project browser
    
    Args:
        filterName (str): name of the filter to open
        projectLevel (str): Optional; project type. It can be {'Project', 'User', 'Company', 'Techlog'}.
    
    Returns:
        bool: operation status
    """
    global _projectBrowserApplyFilter_id
    if _projectBrowserApplyFilter_id is None:
        _projectBrowserApplyFilter_id = _client_service().register_static_object(('TechlogDatabase', 'projectBrowserApplyFilter'))
    return _client_service().call(_projectBrowserApplyFilter_id, *args, **kwargs)


_projectBrowserFilter_id = None
def projectBrowserFilter(*args, **kwargs):
    """
    projectBrowserFilter(filterDict: dict) -> bool
    
    Project browser filter
    
    Args:
        filterDict (dict): a dictionary with filter keys well, dataset, variable like:
    {'well':'A', 'dataset':'AA', 'variable':'AAA'}
    Give an empty dictionary to clean all filters like: {}
    
    Returns:
        bool: operation status
    """
    global _projectBrowserFilter_id
    if _projectBrowserFilter_id is None:
        _projectBrowserFilter_id = _client_service().register_static_object(('TechlogDatabase', 'projectBrowserFilter'))
    return _client_service().call(_projectBrowserFilter_id, *args, **kwargs)


_projectBrowserImportRefresh_id = None
def projectBrowserImportRefresh(*args, **kwargs):
    """
    projectBrowserImportRefresh()
    
    Refresh import project browser
    """
    global _projectBrowserImportRefresh_id
    if _projectBrowserImportRefresh_id is None:
        _projectBrowserImportRefresh_id = _client_service().register_static_object(('TechlogDatabase', 'projectBrowserImportRefresh'))
    return _client_service().call(_projectBrowserImportRefresh_id, *args, **kwargs)


_projectBrowserQuickSearch_id = None
def projectBrowserQuickSearch(*args, **kwargs):
    """
    projectBrowserQuickSearch(text: str) -> bool
    
    Project browser set quick search text
    
    Args:
        text (str): string for quick search
    
    Returns:
        bool: operation status
    """
    global _projectBrowserQuickSearch_id
    if _projectBrowserQuickSearch_id is None:
        _projectBrowserQuickSearch_id = _client_service().register_static_object(('TechlogDatabase', 'projectBrowserQuickSearch'))
    return _client_service().call(_projectBrowserQuickSearch_id, *args, **kwargs)


_projectBrowserRefresh_id = None
def projectBrowserRefresh(*args, **kwargs):
    """
    projectBrowserRefresh()
    
    Refresh project browser
    """
    global _projectBrowserRefresh_id
    if _projectBrowserRefresh_id is None:
        _projectBrowserRefresh_id = _client_service().register_static_object(('TechlogDatabase', 'projectBrowserRefresh'))
    return _client_service().call(_projectBrowserRefresh_id, *args, **kwargs)


_projectBrowserSaveFilter_id = None
def projectBrowserSaveFilter(*args, **kwargs):
    """
    projectBrowserSaveFilter(filterName: str, projectLevel: str='Project') -> bool
    
    Save current project browser filter
    
    Args:
        filterName (str): name to save the filter
        projectLevel (str): Optional; project type. It can be {'Project', 'User', 'Company'}.
    
    Returns:
        bool: operation status
    """
    global _projectBrowserSaveFilter_id
    if _projectBrowserSaveFilter_id is None:
        _projectBrowserSaveFilter_id = _client_service().register_static_object(('TechlogDatabase', 'projectBrowserSaveFilter'))
    return _client_service().call(_projectBrowserSaveFilter_id, *args, **kwargs)


_projectClean_id = None
def projectClean(*args, **kwargs):
    """
    projectClean(noPopUp: bool=False) -> bool
    
    Delete all wells and objects from the project
    
    Args:
        noPopUp (bool): Optional; disable the popup
    
    Returns:
        bool: operation exit status
    """
    global _projectClean_id
    if _projectClean_id is None:
        _projectClean_id = _client_service().register_static_object(('TechlogDatabase', 'projectClean'))
    return _client_service().call(_projectClean_id, *args, **kwargs)


_projectMode_id = None
def projectMode(*args, **kwargs):
    """
    projectMode() -> str
    
    Get the project mode
    
    Returns:
        str: current project mode
    """
    global _projectMode_id
    if _projectMode_id is None:
        _projectMode_id = _client_service().register_static_object(('TechlogDatabase', 'projectMode'))
    return _client_service().call(_projectMode_id, *args, **kwargs)


_projectName_id = None
def projectName(*args, **kwargs):
    """
    projectName()
    
    Get the project name
    
    Returns:
        str: current project's name.
    Raises:
        None: if no open project
    """
    global _projectName_id
    if _projectName_id is None:
        _projectName_id = _client_service().register_static_object(('TechlogDatabase', 'projectName'))
    return _client_service().call(_projectName_id, *args, **kwargs)


_pythonExePath_id = None
def pythonExePath(*args, **kwargs):
    """
    pythonExePath() -> str
    
    Return the path of the python of Techlog
    
    Returns:
        str: Python executable path
    """
    global _pythonExePath_id
    if _pythonExePath_id is None:
        _pythonExePath_id = _client_service().register_static_object(('TechlogDatabase', 'pythonExePath'))
    return _client_service().call(_pythonExePath_id, *args, **kwargs)


_referenceName_id = None
def referenceName(*args, **kwargs):
    """
    referenceName(wellName: str, datasetName: str) -> str
    
    Return the reference name
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        str: reference name
    """
    global _referenceName_id
    if _referenceName_id is None:
        _referenceName_id = _client_service().register_static_object(('TechlogDatabase', 'referenceName'))
    return _client_service().call(_referenceName_id, *args, **kwargs)


_referenceValue_id = None
def referenceValue(*args, **kwargs):
    """
    referenceValue(wellName: str, datasetName: str, referenceLine: int) -> float
    
    Return the reference value for one reference line
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        referenceLine (int): reference line
    
    Returns:
        float: reference value at the requested line
    """
    global _referenceValue_id
    if _referenceValue_id is None:
        _referenceValue_id = _client_service().register_static_object(('TechlogDatabase', 'referenceValue'))
    return _client_service().call(_referenceValue_id, *args, **kwargs)


_replaceSpecialCharactersInName_id = None
def replaceSpecialCharactersInName(*args, **kwargs):
    """
    replaceSpecialCharactersInName(name: str, objectType: int=0, replaceWith: str='_') -> str
    
    Replace forbidden characters in an object name by specified character.
    
    Args:
        name (str): name to check
        objectType (int): Optional; {0=data(well, dataset, variable or group), 1=project, 2=databaseObject}
        replaceWith (str): Optional; character to replace forbidden characters
    
    Returns:
        str: valid object name
    """
    global _replaceSpecialCharactersInName_id
    if _replaceSpecialCharactersInName_id is None:
        _replaceSpecialCharactersInName_id = _client_service().register_static_object(('TechlogDatabase', 'replaceSpecialCharactersInName'))
    return _client_service().call(_replaceSpecialCharactersInName_id, *args, **kwargs)


_resampling_id = None
def resampling(*args, **kwargs):
    """
    resampling(sourceReference: list, destinationReference: list, sourceValues: list, resamplingMethod: str, sourceReferenceUnit: str='', destinationReferenceUnit: str='', sourceValueUnit: str='', winsize: float=-1) -> list
    
    Resampling done on lists, the method must be given
    
    Args:
        sourceReference (list): reference list of the source
        destinationReference (list): reference list of the destination
        sourceValues (list): values list (source)
        resamplingMethod (str): resampling method : {'zonation', 'shift', 'linear', 'lanti-aliasing', 'angle', 'linear arithmetic',
            'linear geometric', 'linear harmonic', 'triangular arithmetic', 'triangular geometric', 'triangular harmonic', 'gaussian arithmetic',
            'gaussian geometric', 'gaussian harmonic', 'fft', 'gaussian convolution', 'linear angle'}
        sourceReferenceUnit (str): Optional; unit of the reference of the source
        destinationReferenceUnit (str): Optional; unit of the reference at destination
        sourceValueUnit (str): Optional; to give when the chosen interpolation method is 'linear angle'
        winsize (float): Optional; size of the window
    
    Returns:
        list: list of destination values
    """
    global _resampling_id
    if _resampling_id is None:
        _resampling_id = _client_service().register_static_object(('TechlogDatabase', 'resampling'))
    return _client_service().call(_resampling_id, *args, **kwargs)


_resamplingMethodDefault_id = None
def resamplingMethodDefault(*args, **kwargs):
    """
    resamplingMethodDefault() -> int
    
    Get the default resampling method
    
    Returns:
        int: method position in the method list (see resamplingMethodList function)
    """
    global _resamplingMethodDefault_id
    if _resamplingMethodDefault_id is None:
        _resamplingMethodDefault_id = _client_service().register_static_object(('TechlogDatabase', 'resamplingMethodDefault'))
    return _client_service().call(_resamplingMethodDefault_id, *args, **kwargs)


_resamplingMethodDefaultChange_id = None
def resamplingMethodDefaultChange(*args, **kwargs):
    """
    resamplingMethodDefaultChange(method: int) -> bool
    
    Set the default resampling method
    
    Args:
        method (int): resampling method position in the method list (see resamplingMethodList function)
    
    Returns:
        bool: operation exit status
    """
    global _resamplingMethodDefaultChange_id
    if _resamplingMethodDefaultChange_id is None:
        _resamplingMethodDefaultChange_id = _client_service().register_static_object(('TechlogDatabase', 'resamplingMethodDefaultChange'))
    return _client_service().call(_resamplingMethodDefaultChange_id, *args, **kwargs)


_resamplingMethodList_id = None
def resamplingMethodList(*args, **kwargs):
    """
    resamplingMethodList() -> list
    
    Get the resampling method list
    
    Returns:
        list: resampling method list
    """
    global _resamplingMethodList_id
    if _resamplingMethodList_id is None:
        _resamplingMethodList_id = _client_service().register_static_object(('TechlogDatabase', 'resamplingMethodList'))
    return _client_service().call(_resamplingMethodList_id, *args, **kwargs)


_selectedDatasetList_id = None
def selectedDatasetList(*args, **kwargs):
    """
    selectedDatasetList(wellName: str) -> list
    
    Return the list of selected datasets
    
    Args:
        wellName (str): well name
    
    Returns:
        list: the list of selected datasets present in the current database
    """
    global _selectedDatasetList_id
    if _selectedDatasetList_id is None:
        _selectedDatasetList_id = _client_service().register_static_object(('TechlogDatabase', 'selectedDatasetList'))
    return _client_service().call(_selectedDatasetList_id, *args, **kwargs)


_selectedVariableList_id = None
def selectedVariableList(*args, **kwargs):
    """
    selectedVariableList(wellName: str, datasetName: str) -> list
    
    The list of selected variables present in the project browser of the current database
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
    
    Returns:
        list: variable list
    """
    global _selectedVariableList_id
    if _selectedVariableList_id is None:
        _selectedVariableList_id = _client_service().register_static_object(('TechlogDatabase', 'selectedVariableList'))
    return _client_service().call(_selectedVariableList_id, *args, **kwargs)


_selectedWellList_id = None
def selectedWellList(*args, **kwargs):
    """
    selectedWellList() -> list
    
    Return the selected well list
    
    Returns:
        list: The list of selected wells present in the current database
    """
    global _selectedWellList_id
    if _selectedWellList_id is None:
        _selectedWellList_id = _client_service().register_static_object(('TechlogDatabase', 'selectedWellList'))
    return _client_service().call(_selectedWellList_id, *args, **kwargs)


_shiftArrayByConst_id = None
def shiftArrayByConst(*args, **kwargs):
    """
    shiftArrayByConst(w: str, d: str, a: str, suffix: str, gap_in: float=0) -> bool
    
    Apply speed correction to list of arrays
    
    Args:
        w (str): name of the well
        d (str): name of the dataset
        a (str): name of the array
        suffix (str): extension for the new array name
        gap_in (float): Optional; constant shift in inches
    
    Returns:
        bool: True or False
    """
    global _shiftArrayByConst_id
    if _shiftArrayByConst_id is None:
        _shiftArrayByConst_id = _client_service().register_static_object(('TechlogDatabase', 'shiftArrayByConst'))
    return _client_service().call(_shiftArrayByConst_id, *args, **kwargs)


_showAWILogView_id = None
def showAWILogView(*args, **kwargs):
    """
    showAWILogView() -> int
    
    Show the Logview generated by selected workflow method.
    Create the Logview if it does not exist yet
    
    Returns:
        int: id of the Logview
    """
    global _showAWILogView_id
    if _showAWILogView_id is None:
        _showAWILogView_id = _client_service().register_static_object(('TechlogDatabase', 'showAWILogView'))
    return _client_service().call(_showAWILogView_id, *args, **kwargs)


_silentModeChange_id = None
def silentModeChange(*args, **kwargs):
    """
    silentModeChange(silent: bool=False) -> bool
    
    Set the silent mode, meaning no pop up
    
    Args:
        silent (bool): Optional; status of the silent mode
    
    Returns:
        bool: return previous mode
    """
    global _silentModeChange_id
    if _silentModeChange_id is None:
        _silentModeChange_id = _client_service().register_static_object(('TechlogDatabase', 'silentModeChange'))
    return _client_service().call(_silentModeChange_id, *args, **kwargs)


_unitIsCompatible_id = None
def unitIsCompatible(*args, **kwargs):
    """
    unitIsCompatible(unit1: str, unit2: str) -> bool
    
    Check if units are compatible
    
    Args:
        unit1 (str): unit1
        unit2 (str): unit2
    
    Returns:
        bool: True if units are compatible
    """
    global _unitIsCompatible_id
    if _unitIsCompatible_id is None:
        _unitIsCompatible_id = _client_service().register_static_object(('TechlogDatabase', 'unitIsCompatible'))
    return _client_service().call(_unitIsCompatible_id, *args, **kwargs)


_unitIsEquivalent_id = None
def unitIsEquivalent(*args, **kwargs):
    """
    unitIsEquivalent(unit1: str, unit2: str) -> bool
    
    Check if units are equivalent
    
    Args:
        unit1 (str): unit1
        unit2 (str): unit2
    
    Returns:
        bool: True if units are equivalent
    """
    global _unitIsEquivalent_id
    if _unitIsEquivalent_id is None:
        _unitIsEquivalent_id = _client_service().register_static_object(('TechlogDatabase', 'unitIsEquivalent'))
    return _client_service().call(_unitIsEquivalent_id, *args, **kwargs)


_unitList_id = None
def unitList(*args, **kwargs):
    """
    unitList() -> list
    
    Return the list of known units
    
    Returns:
        list: The list of known units
    """
    global _unitList_id
    if _unitList_id is None:
        _unitList_id = _client_service().register_static_object(('TechlogDatabase', 'unitList'))
    return _client_service().call(_unitList_id, *args, **kwargs)


_unitNames_id = None
def unitNames(*args, **kwargs):
    """
    unitNames() -> list
    
    Get the available units
    
    Returns:
        list: list of available units
    """
    global _unitNames_id
    if _unitNames_id is None:
        _unitNames_id = _client_service().register_static_object(('TechlogDatabase', 'unitNames'))
    return _client_service().call(_unitNames_id, *args, **kwargs)


_unitSystem_id = None
def unitSystem(*args, **kwargs):
    """
    unitSystem() -> str
    
    Get the current unit system
    
    Returns:
        str: current unit system name with the associated project level (Company\\MyUnitSystem)
    """
    global _unitSystem_id
    if _unitSystem_id is None:
        _unitSystem_id = _client_service().register_static_object(('TechlogDatabase', 'unitSystem'))
    return _client_service().call(_unitSystem_id, *args, **kwargs)


_unitSystemChange_id = None
def unitSystemChange(*args, **kwargs):
    """
    unitSystemChange(UnitSystem: str) -> bool
    
    Set the current unit system
    
    Args:
        UnitSystem (str): the unit system name with the associated project level (User\\MyUnitSystem) or 'None'
    
    Returns:
        bool: operation exit status
    """
    global _unitSystemChange_id
    if _unitSystemChange_id is None:
        _unitSystemChange_id = _client_service().register_static_object(('TechlogDatabase', 'unitSystemChange'))
    return _client_service().call(_unitSystemChange_id, *args, **kwargs)


_variableAliasChange_id = None
def variableAliasChange(*args, **kwargs):
    """
    variableAliasChange(variableName: str, aliasName: str, familyName: str, categoryName: str) -> bool
    
    Set the alias family for a variable
    
    Args:
        variableName (str): variable short name
        aliasName (str): alias name
        familyName (str): family name
        categoryName (str): category: {'user', 'project', 'company'}
    
    Returns:
        bool: operation exit status
    """
    global _variableAliasChange_id
    if _variableAliasChange_id is None:
        _variableAliasChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableAliasChange'))
    return _client_service().call(_variableAliasChange_id, *args, **kwargs)


_variableCompare_id = None
def variableCompare(*args, **kwargs):
    """
    variableCompare(wellName1: str, datasetName1: str, variableName1: str, wellName2: str, datasetName2: str, variableName2: str, checkUnit: bool=False, checkFamily: bool=False, precision: float='-9999', absolutePrecision: float='0') -> bool
    
    Compare the two variables
    If precision is set, returns True if the abs(difference) is less than std::abs(precision) * (std::abs(x) + std::abs(y))
    By default, precision 10e-14 is used
    If absolutePrecision is set, returns True if the abs(difference) is less than absolutePrecision
    
    Args:
        wellName1 (str): first well name
        datasetName1 (str): first dataset name
        variableName1 (str): first variable name
        wellName2 (str): second well name
        datasetName2 (str): second dataset name
        variableName2 (str): second variable name
        checkUnit (bool): Optional; compare variables units
        checkFamily (bool): Optional; compare variables families
        precision (float): Optional; comparison precision
        absolutePrecision (float): Optional; absolute comparison precision
    
    Returns:
        bool: True if variables are identical
    """
    global _variableCompare_id
    if _variableCompare_id is None:
        _variableCompare_id = _client_service().register_static_object(('TechlogDatabase', 'variableCompare'))
    return _client_service().call(_variableCompare_id, *args, **kwargs)


_variableCopy_id = None
def variableCopy(*args, **kwargs):
    """
    variableCopy(wellName: str, datasetSourceName: str, variableName: str, datasetDestinationName: str, newVariableName: str='variableName', interpolationMethod: str='automatic', databaseSource: str='project', databaseDestination: str='project', winSize: float=-1, extrapolate: bool=False, overwrite: bool=False) -> bool
    
    Return the variable data interpolated
    
    Args:
        wellName (str): well name
        datasetSourceName (str): dataset source name
        variableName (str): variable name
        datasetDestinationName (str): dataset destination name
        newVariableName (str): Optional; new variable name
        interpolationMethod (str): Optional; interpolation method: {'automatic', 'zonation', 'shift', 'linear', 'anti-aliasing', 'angle'}
        databaseSource (str): Optional; database source: {'project', 'import', 'export', 'trash'}
        databaseDestination (str): Optional; database destination: {'project', 'import', 'export', 'trash'}
        winSize (float): Optional; windows size for some interpolation methods
        extrapolate (bool): Optional; enable extrapolation
        overwrite (bool): Optional; overwrite wellName.datasetDestinationName.newVariableName if it already exists
    
    Returns:
        bool: operation exit status
    """
    global _variableCopy_id
    if _variableCopy_id is None:
        _variableCopy_id = _client_service().register_static_object(('TechlogDatabase', 'variableCopy'))
    return _client_service().call(_variableCopy_id, *args, **kwargs)


_variableCreate_id = None
def variableCreate(*args, **kwargs):
    """
    variableCreate(wellName: str, datasetName: str, variableName: str, dim: int) -> bool
    
    Create an empty variable or array (not reference)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        dim (int): dimension
    
    Returns:
        bool: operation exit status
    """
    global _variableCreate_id
    if _variableCreate_id is None:
        _variableCreate_id = _client_service().register_static_object(('TechlogDatabase', 'variableCreate'))
    return _client_service().call(_variableCreate_id, *args, **kwargs)


_variableDelete_id = None
def variableDelete(*args, **kwargs):
    """
    variableDelete(wellName: str, datasetName: str, variableName: str, refresh: bool=True) -> bool
    
    Delete a variable
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        refresh (bool): Optional; refresh the project browser
    
    Returns:
        bool: operation exit status
    """
    global _variableDelete_id
    if _variableDelete_id is None:
        _variableDelete_id = _client_service().register_static_object(('TechlogDatabase', 'variableDelete'))
    return _client_service().call(_variableDelete_id, *args, **kwargs)


_variableDescription_id = None
def variableDescription(*args, **kwargs):
    """
    variableDescription(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable description
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable description
    """
    global _variableDescription_id
    if _variableDescription_id is None:
        _variableDescription_id = _client_service().register_static_object(('TechlogDatabase', 'variableDescription'))
    return _client_service().call(_variableDescription_id, *args, **kwargs)


_variableDescriptionChange_id = None
def variableDescriptionChange(*args, **kwargs):
    """
    variableDescriptionChange(wellName: str, datasetName: str, variableName: str, description: str) -> bool
    
    Change the variable description
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        description (str): description
    
    Returns:
        bool: operation exit status
    """
    global _variableDescriptionChange_id
    if _variableDescriptionChange_id is None:
        _variableDescriptionChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableDescriptionChange'))
    return _client_service().call(_variableDescriptionChange_id, *args, **kwargs)


_variableDisplayUnit_id = None
def variableDisplayUnit(*args, **kwargs):
    """
    variableDisplayUnit(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable display unit in the current unit system
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable unit
    """
    global _variableDisplayUnit_id
    if _variableDisplayUnit_id is None:
        _variableDisplayUnit_id = _client_service().register_static_object(('TechlogDatabase', 'variableDisplayUnit'))
    return _client_service().call(_variableDisplayUnit_id, *args, **kwargs)


_variableDuplicate_id = None
def variableDuplicate(*args, **kwargs):
    """
    variableDuplicate(wellName: str, datasetName: str, variableName: str, variableNameDest: str) -> bool
    
    Duplicate an existing variable
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        variableNameDest (str): duplicated variable name
    
    Returns:
        bool: operation exit status
    """
    global _variableDuplicate_id
    if _variableDuplicate_id is None:
        _variableDuplicate_id = _client_service().register_static_object(('TechlogDatabase', 'variableDuplicate'))
    return _client_service().call(_variableDuplicate_id, *args, **kwargs)


_variableExists_id = None
def variableExists(*args, **kwargs):
    """
    variableExists(wellName: str, datasetName: str, variableName: str) -> bool
    
    Check if the variable exists in the project (case sensitive)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        bool: variable exists in the project
    """
    global _variableExists_id
    if _variableExists_id is None:
        _variableExists_id = _client_service().register_static_object(('TechlogDatabase', 'variableExists'))
    return _client_service().call(_variableExists_id, *args, **kwargs)


_variableFamily_id = None
def variableFamily(*args, **kwargs):
    """
    variableFamily(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable family
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable family
    """
    global _variableFamily_id
    if _variableFamily_id is None:
        _variableFamily_id = _client_service().register_static_object(('TechlogDatabase', 'variableFamily'))
    return _client_service().call(_variableFamily_id, *args, **kwargs)


_variableFamilyChange_id = None
def variableFamilyChange(*args, **kwargs):
    """
    variableFamilyChange(wellName: str, datasetName: str, variableName: str, familyName: str) -> bool
    
    Change the variable family
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        familyName (str): family
    
    Returns:
        bool: operation exit status
    """
    global _variableFamilyChange_id
    if _variableFamilyChange_id is None:
        _variableFamilyChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableFamilyChange'))
    return _client_service().call(_variableFamilyChange_id, *args, **kwargs)


_variableFloatToDoubleConvert_id = None
def variableFloatToDoubleConvert(*args, **kwargs):
    """
    variableFloatToDoubleConvert(wellName: str, datasetName: str, variableName: str, precision: int=8) -> bool
    
    Change the variable data format to be in double precision.
    Can be only applied on numerical variable (float)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        precision (int): Optional; [Deprecated] precision of the double values
    
    Returns:
        bool: operation exit status
    """
    global _variableFloatToDoubleConvert_id
    if _variableFloatToDoubleConvert_id is None:
        _variableFloatToDoubleConvert_id = _client_service().register_static_object(('TechlogDatabase', 'variableFloatToDoubleConvert'))
    return _client_service().call(_variableFloatToDoubleConvert_id, *args, **kwargs)


_variableGroup_id = None
def variableGroup(*args, **kwargs):
    """
    variableGroup(wellName: str, datasetName: str, variableName: str) -> list
    
    Get the specified variable group.
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        list: group list
    """
    global _variableGroup_id
    if _variableGroup_id is None:
        _variableGroup_id = _client_service().register_static_object(('TechlogDatabase', 'variableGroup'))
    return _client_service().call(_variableGroup_id, *args, **kwargs)


_variableGroupChange_id = None
def variableGroupChange(*args, **kwargs):
    """
    variableGroupChange(wellName: str, datasetName: str, variableName: str, groupName: list) -> bool
    
    Create/change the specified variable group.
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        groupName (list): group list
    
    Returns:
        bool: operation exit status
    """
    global _variableGroupChange_id
    if _variableGroupChange_id is None:
        _variableGroupChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableGroupChange'))
    return _client_service().call(_variableGroupChange_id, *args, **kwargs)


_variableHistory_id = None
def variableHistory(*args, **kwargs):
    """
    variableHistory(wellName: str, datasetName: str, variableName: str) -> list
    
    Return a list of HistoryItem (the variable history)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        list: HistoryItem
    """
    global _variableHistory_id
    if _variableHistory_id is None:
        _variableHistory_id = _client_service().register_static_object(('TechlogDatabase', 'variableHistory'))
    return _client_service().call(_variableHistory_id, *args, **kwargs)


_variableHistoryAdd_id = None
def variableHistoryAdd(*args, **kwargs):
    """
    variableHistoryAdd(wellName: str, datasetName: str, variableName: str, description: str, date: str) -> bool
    
    Add a new history item to the variable history
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        description (str): description
        date (str): date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
    
    Returns:
        bool: operation exit status
    """
    global _variableHistoryAdd_id
    if _variableHistoryAdd_id is None:
        _variableHistoryAdd_id = _client_service().register_static_object(('TechlogDatabase', 'variableHistoryAdd'))
    return _client_service().call(_variableHistoryAdd_id, *args, **kwargs)


_variableHistoryClear_id = None
def variableHistoryClear(*args, **kwargs):
    """
    variableHistoryClear(wellName: str, datasetName: str, variableName: str) -> bool
    
    Clear the history of the variable
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _variableHistoryClear_id
    if _variableHistoryClear_id is None:
        _variableHistoryClear_id = _client_service().register_static_object(('TechlogDatabase', 'variableHistoryClear'))
    return _client_service().call(_variableHistoryClear_id, *args, **kwargs)


_variableHistoryDelete_id = None
def variableHistoryDelete(*args, **kwargs):
    """
    variableHistoryDelete(wellName: str, datasetName: str, variableName: str, startDate: str, endDate: str, content: str, include: bool) -> bool
    
    Delete history items between start and end date from the variable history
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        startDate (str): start date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
        endDate (str): end date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
        content (str): content to filter on
        include (bool): [=True] include [False] or exclude the item based on the content, within the date range
    
    Returns:
        bool: operation exit status
    """
    global _variableHistoryDelete_id
    if _variableHistoryDelete_id is None:
        _variableHistoryDelete_id = _client_service().register_static_object(('TechlogDatabase', 'variableHistoryDelete'))
    return _client_service().call(_variableHistoryDelete_id, *args, **kwargs)


_variableInformation_id = None
def variableInformation(*args, **kwargs):
    """
    variableInformation(wellName: str, datasetName: str, variableName: str, informationType: str) -> str
    
    Return a variable information
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        informationType (str): information type : {'DataFormat', 'SourceFilename', 'NumberOfSamples',
                                          'LastUpdate', 'NumberOfMissingValues', 'MinValue',
                                          'MaxValue', 'Mean', 'StandardDeviation', 'TopIndex',
                                          'BottomIndex', 'Quantil5', 'Quantil10', 'Quantil25',
                                          'Quantil50', 'Quantil75', 'Quantil90', 'Quantil95'}
    
    Returns:
        str: variable information
    """
    global _variableInformation_id
    if _variableInformation_id is None:
        _variableInformation_id = _client_service().register_static_object(('TechlogDatabase', 'variableInformation'))
    return _client_service().call(_variableInformation_id, *args, **kwargs)


_variableIsInFilter_id = None
def variableIsInFilter(*args, **kwargs):
    """
    variableIsInFilter(fileName: str, variableName: str) -> bool
    
    Check a variable is in filter
    
    Args:
        fileName (str): file name (= wellname_datasetname)
        variableName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _variableIsInFilter_id
    if _variableIsInFilter_id is None:
        _variableIsInFilter_id = _client_service().register_static_object(('TechlogDatabase', 'variableIsInFilter'))
    return _client_service().call(_variableIsInFilter_id, *args, **kwargs)


_variableIsIncreasing_id = None
def variableIsIncreasing(*args, **kwargs):
    """
    variableIsIncreasing(wellName: str, datasetName: str, variableName: str) -> bool
    
    Check if the variable is increasing
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _variableIsIncreasing_id
    if _variableIsIncreasing_id is None:
        _variableIsIncreasing_id = _client_service().register_static_object(('TechlogDatabase', 'variableIsIncreasing'))
    return _client_service().call(_variableIsIncreasing_id, *args, **kwargs)


_variableList_id = None
def variableList(*args, **kwargs):
    """
    variableList(wellName: str, datasetName: str, useFilter: bool=True) -> list
    
    The list of the variables present in the 'filtered' project
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        useFilter (bool): Optional; use the current project browser filter
    
    Returns:
        list: variable list
    """
    global _variableList_id
    if _variableList_id is None:
        _variableList_id = _client_service().register_static_object(('TechlogDatabase', 'variableList'))
    return _client_service().call(_variableList_id, *args, **kwargs)


_variableListByAlias_id = None
def variableListByAlias(*args, **kwargs):
    """
    variableListByAlias(wellName: str, datasetName: str, aliasName: str=None) -> list
    
    The list of the variables filtered by alias name present in the 'filtered' project
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        aliasName (str): Optional; alias name
    
    Returns:
        list: variable list
    """
    global _variableListByAlias_id
    if _variableListByAlias_id is None:
        _variableListByAlias_id = _client_service().register_static_object(('TechlogDatabase', 'variableListByAlias'))
    return _client_service().call(_variableListByAlias_id, *args, **kwargs)


_variableListByFamily_id = None
def variableListByFamily(*args, **kwargs):
    """
    variableListByFamily(wellName: str, datasetName: str, familyName: str=None) -> list
    
    The list of the variables filtered by family name present in the 'filtered' project
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        familyName (str): Optional; family name
    
    Returns:
        list: variable list
    """
    global _variableListByFamily_id
    if _variableListByFamily_id is None:
        _variableListByFamily_id = _client_service().register_static_object(('TechlogDatabase', 'variableListByFamily'))
    return _client_service().call(_variableListByFamily_id, *args, **kwargs)


_variableListCopy_id = None
def variableListCopy(*args, **kwargs):
    """
    variableListCopy(wellName: str, datasetSourceName: str, variableList: list, datasetDestinationName: str, interpolationMethod: str='automatic', databaseSource: str='project', databaseDestination: str='project', winSize: float=-1, extrapolate: bool=False) -> bool
    
    Return the variable data interpolated
    
    Args:
        wellName (str): well name
        datasetSourceName (str): dataset source name
        variableList (list): variable name list
        datasetDestinationName (str): dataset destination name
        interpolationMethod (str): Optional; interpolation method: {'automatic', 'zonation', 'shift', 'linear', 'anti-aliasing', 'angle'}
        databaseSource (str): Optional; database source: {'project', 'import', 'export', 'trash'}
        databaseDestination (str): Optional; database destination: {'project', 'import', 'export', 'trash'}
        winSize (float): Optional; windows size for some interpolation methods
        extrapolate (bool): Optional; enable extrapolation
    
    Returns:
        bool: operation exit status
    """
    global _variableListCopy_id
    if _variableListCopy_id is None:
        _variableListCopy_id = _client_service().register_static_object(('TechlogDatabase', 'variableListCopy'))
    return _client_service().call(_variableListCopy_id, *args, **kwargs)


_variableListDelete_id = None
def variableListDelete(*args, **kwargs):
    """
    variableListDelete(wellName: str, datasetName: str, variableList: list) -> list
    
    Delete list of variable
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableList (list): variable list
    
    Returns:
        list: variables deleted
    """
    global _variableListDelete_id
    if _variableListDelete_id is None:
        _variableListDelete_id = _client_service().register_static_object(('TechlogDatabase', 'variableListDelete'))
    return _client_service().call(_variableListDelete_id, *args, **kwargs)


@_lutils.return_if_exception(None)
def variableLoad(wellName, datasetName, variableName, type=None, projectKey=None, unit=None):
    """
    variableLoad(wellName: str, datasetName: str, variableName: str, type: str='auto') -> list
    
    Return the variable data
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        type (str): Optional; [Deprecated] 'auto' or 'float' (get float data, even for double)
    
    Returns:
        list: variable data
    """

    _raiseIfPyWERelaxed()

    return _lutils.load_variable(wellName, datasetName, variableName,
        unit = unit,
        projectKey = projectKey,
    )


# TODO: variableLoadColumn


_variableLoadColumn_id = None
def variableLoadColumn(*args, **kwargs):
    """
    variableLoadColumn(well: str, dataset: str, variable: str, index: int) -> list
    
    Return a column of variable data
    
    Args:
        well (str): well name
        dataset (str): dataset name
        variable (str): variable name
        index (int): column index
    
    Returns:
        list: column data
    """
    global _variableLoadColumn_id
    if _variableLoadColumn_id is None:
        _variableLoadColumn_id = _client_service().register_static_object(('TechlogDatabase', 'variableLoadColumn'))
    return _client_service().call(_variableLoadColumn_id, *args, **kwargs)


@_lutils.return_if_exception(None)
def variableLoadFrom(wellName, datasetName, variableName,
        datasetDestinationName, interpolationMethod=None, windowSize=-1, unit=None):
    """
    variableLoadFrom(wellName: str, datasetName: str, variableName: str, datasetDestinationName: str, interpolationMethod: str='auto', windowSize: float=-1) -> list
    
    Return the variable data interpolated
    
    Args:
        wellName (str): well name
        datasetName (str): dataset source name
        variableName (str): variable name
        datasetDestinationName (str): dataset destination name
        interpolationMethod (str): Optional; interpolation method: {'auto', 'zonation', 'shift', 'linear', 'anti-aliasing', 'angle', 'extrapolation'}
        windowSize (float): Optional; the window size that is used for the interpolation}
    
    Returns:
        list: variable data
    """

    _raiseIfPyWE()

    return _lutils.load_variable(wellName, datasetName, variableName,
        datasetDestinationName, interpolationMethod, windowSize, unit)


_variableMeasurement_id = None
def variableMeasurement(*args, **kwargs):
    """
    variableMeasurement(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable measurement
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable measurement
    """
    global _variableMeasurement_id
    if _variableMeasurement_id is None:
        _variableMeasurement_id = _client_service().register_static_object(('TechlogDatabase', 'variableMeasurement'))
    return _client_service().call(_variableMeasurement_id, *args, **kwargs)


_variableMerge_id = None
def variableMerge(*args, **kwargs):
    """
    variableMerge(wellName: str, datasetName: str, listVariableToMerge: list, newNameMergedVariable: str) -> bool
    
    Merge variables from list to one single variable
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        listVariableToMerge (list): list of the variable to merge
        newNameMergedVariable (str): new name of the merged variable
    
    Returns:
        bool: operation exit status
    """
    global _variableMerge_id
    if _variableMerge_id is None:
        _variableMerge_id = _client_service().register_static_object(('TechlogDatabase', 'variableMerge'))
    return _client_service().call(_variableMerge_id, *args, **kwargs)


_variableNameWithoutVersion_id = None
def variableNameWithoutVersion(*args, **kwargs):
    """
    variableNameWithoutVersion(variableName: str) -> str
    
    Return the unversionned name of the variable
    
    Args:
        variableName (str): variable name
    
    Returns:
        str: unversionned name of the variable
    """
    global _variableNameWithoutVersion_id
    if _variableNameWithoutVersion_id is None:
        _variableNameWithoutVersion_id = _client_service().register_static_object(('TechlogDatabase', 'variableNameWithoutVersion'))
    return _client_service().call(_variableNameWithoutVersion_id, *args, **kwargs)


_variablePalette_id = None
def variablePalette(*args, **kwargs):
    """
    variablePalette(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable palette
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable palette
    """
    global _variablePalette_id
    if _variablePalette_id is None:
        _variablePalette_id = _client_service().register_static_object(('TechlogDatabase', 'variablePalette'))
    return _client_service().call(_variablePalette_id, *args, **kwargs)


_variablePaletteChange_id = None
def variablePaletteChange(*args, **kwargs):
    """
    variablePaletteChange(wellName: str, datasetName: str, variableName: str, palette: str) -> bool
    
    Change the variable palette
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        palette (str): palette
    
    Returns:
        bool: operation exit status
    """
    global _variablePaletteChange_id
    if _variablePaletteChange_id is None:
        _variablePaletteChange_id = _client_service().register_static_object(('TechlogDatabase', 'variablePaletteChange'))
    return _client_service().call(_variablePaletteChange_id, *args, **kwargs)


_variablePropertyChange_id = None
def variablePropertyChange(*args, **kwargs):
    """
    variablePropertyChange(wellName: str, datasetName: str, variableName: str, propertyName: str, propertyValue: str, propertyUnit: str='', propertyDescription: str='') -> bool
    
    Create/change the specified variable property.
    If property name is Palette, then the variable palette
    is going to be changed
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        propertyName (str): property name
        propertyValue (str): property value
        propertyUnit (str): Optional; property unit
        propertyDescription (str): Optional; property description
    
    Returns:
        bool: operation exit status
    """
    global _variablePropertyChange_id
    if _variablePropertyChange_id is None:
        _variablePropertyChange_id = _client_service().register_static_object(('TechlogDatabase', 'variablePropertyChange'))
    return _client_service().call(_variablePropertyChange_id, *args, **kwargs)


_variablePropertyDelete_id = None
def variablePropertyDelete(*args, **kwargs):
    """
    variablePropertyDelete(wellName: str, datasetName: str, variableName: str, propertyName: str) -> bool
    
    Delete a variable property
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        propertyName (str): property name
    
    Returns:
        bool: operation exit status
    """
    global _variablePropertyDelete_id
    if _variablePropertyDelete_id is None:
        _variablePropertyDelete_id = _client_service().register_static_object(('TechlogDatabase', 'variablePropertyDelete'))
    return _client_service().call(_variablePropertyDelete_id, *args, **kwargs)


_variablePropertyDescription_id = None
def variablePropertyDescription(*args, **kwargs):
    """
    variablePropertyDescription(wellName: str, datasetName: str, variableName: str, propertyName: str) -> str
    
    Return the variable property description
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        propertyName (str): property name
    
    Returns:
        str: property description
    """
    global _variablePropertyDescription_id
    if _variablePropertyDescription_id is None:
        _variablePropertyDescription_id = _client_service().register_static_object(('TechlogDatabase', 'variablePropertyDescription'))
    return _client_service().call(_variablePropertyDescription_id, *args, **kwargs)


_variablePropertyList_id = None
def variablePropertyList(*args, **kwargs):
    """
    variablePropertyList(wellName: str, datasetName: str, variableName: str) -> list
    
    Return the list of variable property names
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        list: property names list
    """
    global _variablePropertyList_id
    if _variablePropertyList_id is None:
        _variablePropertyList_id = _client_service().register_static_object(('TechlogDatabase', 'variablePropertyList'))
    return _client_service().call(_variablePropertyList_id, *args, **kwargs)


_variablePropertyUnit_id = None
def variablePropertyUnit(*args, **kwargs):
    """
    variablePropertyUnit(wellName: str, datasetName: str, variableName: str, propertyName: str) -> str
    
    Return the variable property unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        propertyName (str): property name
    
    Returns:
        str: property unit
    """
    global _variablePropertyUnit_id
    if _variablePropertyUnit_id is None:
        _variablePropertyUnit_id = _client_service().register_static_object(('TechlogDatabase', 'variablePropertyUnit'))
    return _client_service().call(_variablePropertyUnit_id, *args, **kwargs)


_variablePropertyValue_id = None
def variablePropertyValue(*args, **kwargs):
    """
    variablePropertyValue(wellName: str, datasetName: str, variableName: str, propertyName: str) -> str
    
    Return the variable property value
    If the property name is Palette, the variable palette is returned
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        propertyName (str): property name
    
    Returns:
        str: property value
    """
    global _variablePropertyValue_id
    if _variablePropertyValue_id is None:
        _variablePropertyValue_id = _client_service().register_static_object(('TechlogDatabase', 'variablePropertyValue'))
    return _client_service().call(_variablePropertyValue_id, *args, **kwargs)


_variableRename_id = None
def variableRename(*args, **kwargs):
    """
    variableRename(wellName: str, datsetName: str, variableName: str, newVariableName: str) -> bool
    
    Modify the variable name
    
    Args:
        wellName (str): well name
        datsetName (str): dataset name
        variableName (str): variable name
        newVariableName (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _variableRename_id
    if _variableRename_id is None:
        _variableRename_id = _client_service().register_static_object(('TechlogDatabase', 'variableRename'))
    return _client_service().call(_variableRename_id, *args, **kwargs)


_variableResampling_id = None
def variableResampling(*args, **kwargs):
    """
    variableResampling(wellName: str, datasetSourceName: str, variableName: str, datasetDestinationName: str, newVariableName: str='variableName', resamplingMethod: str='automatic', winsize: float) -> bool
    
    Resampling of the variable
    
    Args:
        wellName (str): well name
        datasetSourceName (str): dataset source name
        variableName (str): variable name
        datasetDestinationName (str): dataset destination name
        newVariableName (str): Optional; new variable name
        resamplingMethod (str): Optional; resampling method : {'automatic', 'zonation', 'shift', 'linear', 'anti-aliasing', 'linear arithmetic',
            'linear geometric', 'linear harmonic', 'triangular arithmetic', 'triangular geometric', 'triangular harmonic', 'gaussian arithmetic',
            'gaussian geometric', 'gaussian harmonic', 'fft', 'gaussian convolution', 'linear angle'}
        winsize (float): size of the window
    
    Returns:
        bool: operation exit status
    """
    global _variableResampling_id
    if _variableResampling_id is None:
        _variableResampling_id = _client_service().register_static_object(('TechlogDatabase', 'variableResampling'))
    return _client_service().call(_variableResampling_id, *args, **kwargs)


@_lutils.return_if_exception(False)
def variableSave(wellName, datasetName, variableName, familyName, unit, values,
        showthewarning=False, type="auto", allowvarioussize=False):
    """
    variableSave(wellName: str, datasetName: str, variableName: str, familyName: str, unit: str, values: list, showthewarning: bool=False, type: str='auto') -> bool
    
    Save the variable into the database
    Data is saved as float, or string if it contains non float,
    or in double if type is specified as double
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        familyName (str): family name. Set it to None to use family assignment rules
        unit (str): unit name
        values (list): values list
        showthewarning (bool): Optional; DEPRECATED: must be False
        type (str): Optional; 'auto', 'float', 'string' or 'double'
    
    Returns:
        bool: operation exit status
    """

    _raiseIfPyWERelaxed()

    _lutils.save_variable(wellName, datasetName, variableName, familyName, unit, values,
            showthewarning, type, allowvarioussize)
    return True


# TODO: variableSaveColumn


_variableSaveColumn_id = None
def variableSaveColumn(*args, **kwargs):
    """
    variableSaveColumn(well: str, dataset: str, variable: str, index: int, list: list) -> bool
    
    Save a column of existing variable data
    
    Args:
        well (str): well name
        dataset (str): dataset name
        variable (str): variable name
        index (int): column index
        list (list): column data
    
    Returns:
        bool: operation exit status
    """
    global _variableSaveColumn_id
    if _variableSaveColumn_id is None:
        _variableSaveColumn_id = _client_service().register_static_object(('TechlogDatabase', 'variableSaveColumn'))
    return _client_service().call(_variableSaveColumn_id, *args, **kwargs)


_variableSecondaryUnit_id = None
def variableSecondaryUnit(*args, **kwargs):
    """
    variableSecondaryUnit(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable secondary unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable secondary unit
    """
    global _variableSecondaryUnit_id
    if _variableSecondaryUnit_id is None:
        _variableSecondaryUnit_id = _client_service().register_static_object(('TechlogDatabase', 'variableSecondaryUnit'))
    return _client_service().call(_variableSecondaryUnit_id, *args, **kwargs)


_variableSecondaryUnitChange_id = None
def variableSecondaryUnitChange(*args, **kwargs):
    """
    variableSecondaryUnitChange(wellName: str, datasetName: str, variableName: str, unit: str) -> bool
    
    Change the variable secondary unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        unit (str): unit
    
    Returns:
        bool: operation exit status
    """
    global _variableSecondaryUnitChange_id
    if _variableSecondaryUnitChange_id is None:
        _variableSecondaryUnitChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableSecondaryUnitChange'))
    return _client_service().call(_variableSecondaryUnitChange_id, *args, **kwargs)


_variableSourceFilenameChange_id = None
def variableSourceFilenameChange(*args, **kwargs):
    """
    variableSourceFilenameChange(wellName: str, datasetName: str, variableName: str, fileName: str) -> bool
    
    Modify the variable source file name
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        fileName (str): file name
    
    Returns:
        bool: operation exit status
    """
    global _variableSourceFilenameChange_id
    if _variableSourceFilenameChange_id is None:
        _variableSourceFilenameChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableSourceFilenameChange'))
    return _client_service().call(_variableSourceFilenameChange_id, *args, **kwargs)


_variableStorageType_id = None
def variableStorageType(*args, **kwargs):
    """
    variableStorageType(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable storage type
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable type
    """
    global _variableStorageType_id
    if _variableStorageType_id is None:
        _variableStorageType_id = _client_service().register_static_object(('TechlogDatabase', 'variableStorageType'))
    return _client_service().call(_variableStorageType_id, *args, **kwargs)


@_lutils.return_if_exception(False)
def variableTempSave(wellName, datasetName, variableName, familyName, unit, values,
        format="", projectKey=None):
    """
    variableTempSave(wellName: str, datasetName: str, variableName: str, familyName: str, unit: str, values: list) -> bool
    
    Save as a temporary variable (for internal use only)
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        familyName (str): family name. Set it to None to use family assignment rules
        unit (str): unit name
        values (list): values list
    
    Returns:
        bool: operation exit status
    """

    _raiseIfPyWE()

    _lutils.save_variable(wellName, datasetName, variableName, familyName, unit, values,
        False, format, False,
        project_key = projectKey,
        variable_must_exists = True,
        is_save_temp = True
    )
    return True


# TODO: variableValuesChange ?


_variableType_id = None
def variableType(*args, **kwargs):
    """
    variableType(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable type
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable type : {'Continu', 'Annotation', 'CoreImage', 'BlockedCurve', 'Plug', 'BoreholeImage',
                                    'UnknownArray', 'HistogramArray', 'CrossPlotArray', 'Seismic', 'CumulArray', 'ArrayMatrix',
                                    'RichText', 'TopBottomCurve', 'Dip', 'CasingShoe', 'DateTime', 'AcousticWaveformArray',
                                    'AcousticMatrixArray', 'ColorVariable', 'SquareVariable', 'FractureVariable', 'TraceArray'}
    """
    global _variableType_id
    if _variableType_id is None:
        _variableType_id = _client_service().register_static_object(('TechlogDatabase', 'variableType'))
    return _client_service().call(_variableType_id, *args, **kwargs)


_variableTypeChange_id = None
def variableTypeChange(*args, **kwargs):
    """
    variableTypeChange(wellName: str, datasetName: str, variableName: str, variabletype: str) -> bool
    
    Change the variable type
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        variabletype (str): variable type : {'Continu', 'Annotation', 'CoreImage', 'BlockedCurve', 'Plug', 'BoreholeImage',
                                       'UnknownArray', 'HistogramArray', 'CrossPlotArray', 'Seismic', 'CumulArray', 'ArrayMatrix',
                                       'RichText', 'TopBottomCurve', 'Dip', 'CasingShoe', 'DateTime', 'AcousticWaveformArray',
                                       'AcousticMatrixArray', 'ColorVariable', 'SquareVariable', 'FractureVariable', 'TraceArray'}
    
    Returns:
        bool: operation exit status
    """
    global _variableTypeChange_id
    if _variableTypeChange_id is None:
        _variableTypeChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableTypeChange'))
    return _client_service().call(_variableTypeChange_id, *args, **kwargs)


_variableTypeID_id = None
def variableTypeID(*args, **kwargs):
    """
    variableTypeID(wellName: str, datasetName: str, variableName: str) -> int
    
    Return the variable type ID
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        int: variable type ID : {0='continuous', 1='text', 2='image',
                                      3='blocked and centred', 4='point data', 5='borehole image',
                                      6='unknown array', 7='histogram array', 8='cross-plot array', 9='seismic array',
                                      10='cumulated array', 11='matrix array', 12='rich text',
                                      13='blocked curve', 14='dip', 15='casing shoe', 16='date time',
                                      17='acoustic array', 18='colour variable'}
    """
    global _variableTypeID_id
    if _variableTypeID_id is None:
        _variableTypeID_id = _client_service().register_static_object(('TechlogDatabase', 'variableTypeID'))
    return _client_service().call(_variableTypeID_id, *args, **kwargs)


_variableTypeIDChange_id = None
def variableTypeIDChange(*args, **kwargs):
    """
    variableTypeIDChange(wellName: str, datasetName: str, variableName: str, typeID: int) -> bool
    
    Change the variable type ID
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        typeID (int): variable type ID : {0='continuous', 1='text', 2='image',
                                      3='blocked and centered', 4='point data', 5='borehole image',
                                      6='unknown array', 7='histogram array', 8='cross-plot array', 9='seismic array',
                                      10='cumulated array', 11='matrix array', 12='rich text',
                                      13='blocked curve', 14='dip', 15='casing shoe', 16='date time',
                                      17='acoustic waveform array', 18='acoustic matrix array', 19='colour variable',
                                      20='square variable', 21='fracture variable'}
    
    Returns:
        bool: operation exit status
    """
    global _variableTypeIDChange_id
    if _variableTypeIDChange_id is None:
        _variableTypeIDChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableTypeIDChange'))
    return _client_service().call(_variableTypeIDChange_id, *args, **kwargs)


_variableUnit_id = None
def variableUnit(*args, **kwargs):
    """
    variableUnit(wellName: str, datasetName: str, variableName: str) -> str
    
    Return the variable unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
    
    Returns:
        str: variable unit
    """
    global _variableUnit_id
    if _variableUnit_id is None:
        _variableUnit_id = _client_service().register_static_object(('TechlogDatabase', 'variableUnit'))
    return _client_service().call(_variableUnit_id, *args, **kwargs)


_variableUnitChange_id = None
def variableUnitChange(*args, **kwargs):
    """
    variableUnitChange(wellName: str, datasetName: str, variableName: str, unit: str) -> bool
    
    Change the variable unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        unit (str): unit
    
    Returns:
        bool: operation exit status
    """
    global _variableUnitChange_id
    if _variableUnitChange_id is None:
        _variableUnitChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableUnitChange'))
    return _client_service().call(_variableUnitChange_id, *args, **kwargs)


_variableUnitConvert_id = None
def variableUnitConvert(*args, **kwargs):
    """
    variableUnitConvert(wellName: str, datasetName: str, variableName: str, unit: str) -> bool
    
    Convert the variable to the specified unit
    
    Args:
        wellName (str): well name
        datasetName (str): dataset name
        variableName (str): variable name
        unit (str): unit
    
    Returns:
        bool: operation exit status
    """
    global _variableUnitConvert_id
    if _variableUnitConvert_id is None:
        _variableUnitConvert_id = _client_service().register_static_object(('TechlogDatabase', 'variableUnitConvert'))
    return _client_service().call(_variableUnitConvert_id, *args, **kwargs)


_variableValuesChange_id = None
def variableValuesChange(*args, **kwargs):
    """
    variableValuesChange(w: str, d: str, v: str, d: dict) -> bool
    
    Modify the variable values
    
    Args:
        w (str): well name
        d (str): dataset name
        v (str): variable name
        d (dict): values dictionary
    
    Returns:
        bool: operation exit status
    """
    global _variableValuesChange_id
    if _variableValuesChange_id is None:
        _variableValuesChange_id = _client_service().register_static_object(('TechlogDatabase', 'variableValuesChange'))
    return _client_service().call(_variableValuesChange_id, *args, **kwargs)


_variableVersion_id = None
def variableVersion(*args, **kwargs):
    """
    variableVersion(variableName: str) -> int
    
    Return the version of the variable
    
    Args:
        variableName (str): variable name
    
    Returns:
        int: version of the variable
    """
    global _variableVersion_id
    if _variableVersion_id is None:
        _variableVersion_id = _client_service().register_static_object(('TechlogDatabase', 'variableVersion'))
    return _client_service().call(_variableVersion_id, *args, **kwargs)


_version_id = None
def version(*args, **kwargs):
    """
    version() -> str
    
    Return a string corresponding to the Techlog version
    
    Returns:
        str: version number
    """
    global _version_id
    if _version_id is None:
        _version_id = _client_service().register_static_object(('TechlogDatabase', 'version'))
    return _client_service().call(_version_id, *args, **kwargs)


_versionTest_id = None
def versionTest(*args, **kwargs):
    """
    versionTest(majorVersion: int, minorVersion: int, tagVersion: str) -> bool
    
    Compare current version to parameters one
    
    Args:
        majorVersion (int): major version
        minorVersion (int): minor version
        tagVersion (str): tag ('Alpha', 'Beta', 'RC')
    
    Returns:
        bool: True if the current version is more recent
    """
    global _versionTest_id
    if _versionTest_id is None:
        _versionTest_id = _client_service().register_static_object(('TechlogDatabase', 'versionTest'))
    return _client_service().call(_versionTest_id, *args, **kwargs)


_wellColor_id = None
def wellColor(*args, **kwargs):
    """
    wellColor(wellName: str) -> str
    
    Gets the color of the specified well
    
    Args:
        wellName (str): well name
    
    Returns:
        str: the color of the well under the format #XXYYZZ
    """
    global _wellColor_id
    if _wellColor_id is None:
        _wellColor_id = _client_service().register_static_object(('TechlogDatabase', 'wellColor'))
    return _client_service().call(_wellColor_id, *args, **kwargs)


_wellColorChange_id = None
def wellColorChange(*args, **kwargs):
    """
    wellColorChange(wellName: str, color: str) -> bool
    
    Set the color of the specified well
    
    Args:
        wellName (str): well name
        color (str): the color of the well under the format #XXYYZZ
    
    Returns:
        bool: operation exit status
    """
    global _wellColorChange_id
    if _wellColorChange_id is None:
        _wellColorChange_id = _client_service().register_static_object(('TechlogDatabase', 'wellColorChange'))
    return _client_service().call(_wellColorChange_id, *args, **kwargs)


_wellCopy_id = None
def wellCopy(*args, **kwargs):
    """
    wellCopy(w: str, databaseSource: str, databaseDestination: str) -> bool
    
    Copy a well from a database to another one. Copy will fail if destination already exists
    
    Args:
        w (str): well name
        databaseSource (str): database source = {'import', 'export', 'trash'}
        databaseDestination (str): database destination = {'import', 'export', 'trash'}
    
    Returns:
        bool: operation exit status
    """
    global _wellCopy_id
    if _wellCopy_id is None:
        _wellCopy_id = _client_service().register_static_object(('TechlogDatabase', 'wellCopy'))
    return _client_service().call(_wellCopy_id, *args, **kwargs)


_wellCreate_id = None
def wellCreate(*args, **kwargs):
    """
    wellCreate(wellName: str, refresh: bool=False) -> bool
    
    Creates a well
    
    Args:
        wellName (str): well name
        refresh (bool): Optional; refresh the project browser
    
    Returns:
        bool: operation exit status
    """
    global _wellCreate_id
    if _wellCreate_id is None:
        _wellCreate_id = _client_service().register_static_object(('TechlogDatabase', 'wellCreate'))
    return _client_service().call(_wellCreate_id, *args, **kwargs)


_wellDelete_id = None
def wellDelete(*args, **kwargs):
    """
    wellDelete(wellName: str, refresh: bool=False) -> bool
    
    Delete a well from the project
    
    Args:
        wellName (str): well name
        refresh (bool): Optional; refresh the project browser
    
    Returns:
        bool: operation exit status
    """
    global _wellDelete_id
    if _wellDelete_id is None:
        _wellDelete_id = _client_service().register_static_object(('TechlogDatabase', 'wellDelete'))
    return _client_service().call(_wellDelete_id, *args, **kwargs)


_wellDuplicate_id = None
def wellDuplicate(*args, **kwargs):
    """
    wellDuplicate(wellName: str, newWellName: str) -> bool
    
    Duplicate the well
    
    Args:
        wellName (str): well name
        newWellName (str): new well name
    
    Returns:
        bool: operation exit status
    """
    global _wellDuplicate_id
    if _wellDuplicate_id is None:
        _wellDuplicate_id = _client_service().register_static_object(('TechlogDatabase', 'wellDuplicate'))
    return _client_service().call(_wellDuplicate_id, *args, **kwargs)


_wellExists_id = None
def wellExists(*args, **kwargs):
    """
    wellExists(wellName: str) -> bool
    
    Check if the well exists in the project (case insensitive)
    
    Args:
        wellName (str): well name
    
    Returns:
        bool: well exists in the project
    """
    global _wellExists_id
    if _wellExists_id is None:
        _wellExists_id = _client_service().register_static_object(('TechlogDatabase', 'wellExists'))
    return _client_service().call(_wellExists_id, *args, **kwargs)


_wellGroup_id = None
def wellGroup(*args, **kwargs):
    """
    wellGroup(wellName: str) -> list
    
    Get the specified well group.
    
    Args:
        wellName (str): well name
    
    Returns:
        list: group list
    """
    global _wellGroup_id
    if _wellGroup_id is None:
        _wellGroup_id = _client_service().register_static_object(('TechlogDatabase', 'wellGroup'))
    return _client_service().call(_wellGroup_id, *args, **kwargs)


_wellGroupChange_id = None
def wellGroupChange(*args, **kwargs):
    """
    wellGroupChange(wellName: str, groupName: list) -> bool
    
    Create/change the specified well group.
    
    Args:
        wellName (str): well name
        groupName (list): group list
    
    Returns:
        bool: operation exit status
    """
    global _wellGroupChange_id
    if _wellGroupChange_id is None:
        _wellGroupChange_id = _client_service().register_static_object(('TechlogDatabase', 'wellGroupChange'))
    return _client_service().call(_wellGroupChange_id, *args, **kwargs)


_wellHistory_id = None
def wellHistory(*args, **kwargs):
    """
    wellHistory(wellName: str) -> list
    
    Return a list of HistoryItem (the well history)
    
    Args:
        wellName (str): well name
    
    Returns:
        list: HistoryItem
    """
    global _wellHistory_id
    if _wellHistory_id is None:
        _wellHistory_id = _client_service().register_static_object(('TechlogDatabase', 'wellHistory'))
    return _client_service().call(_wellHistory_id, *args, **kwargs)


_wellHistoryAdd_id = None
def wellHistoryAdd(*args, **kwargs):
    """
    wellHistoryAdd(wellName: str, description: str, date: str) -> bool
    
    Add a new history item to the well history
    
    Args:
        wellName (str): well name
        description (str): description
        date (str): date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
    
    Returns:
        bool: operation exit status
    """
    global _wellHistoryAdd_id
    if _wellHistoryAdd_id is None:
        _wellHistoryAdd_id = _client_service().register_static_object(('TechlogDatabase', 'wellHistoryAdd'))
    return _client_service().call(_wellHistoryAdd_id, *args, **kwargs)


_wellHistoryClear_id = None
def wellHistoryClear(*args, **kwargs):
    """
    wellHistoryClear(wellName: str) -> bool
    
    Clear the history of the well
    
    Args:
        wellName (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _wellHistoryClear_id
    if _wellHistoryClear_id is None:
        _wellHistoryClear_id = _client_service().register_static_object(('TechlogDatabase', 'wellHistoryClear'))
    return _client_service().call(_wellHistoryClear_id, *args, **kwargs)


_wellHistoryDelete_id = None
def wellHistoryDelete(*args, **kwargs):
    """
    wellHistoryDelete(wellName: str, startDate: str, endDate: str, content: str, include: bool) -> bool
    
    Delete history items between start and end date from the well history
    
    Args:
        wellName (str): well name
        startDate (str): start date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
        endDate (str): end date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)
        content (str): content to filter on
        include (bool): [=True] include [False] or exclude the item based on the content, within the date range
    
    Returns:
        bool: operation exit status
    """
    global _wellHistoryDelete_id
    if _wellHistoryDelete_id is None:
        _wellHistoryDelete_id = _client_service().register_static_object(('TechlogDatabase', 'wellHistoryDelete'))
    return _client_service().call(_wellHistoryDelete_id, *args, **kwargs)


_wellIsInFilter_id = None
def wellIsInFilter(*args, **kwargs):
    """
    wellIsInFilter(wellName: str) -> bool
    
    Check whether a well is in filter
    
    Args:
        wellName (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _wellIsInFilter_id
    if _wellIsInFilter_id is None:
        _wellIsInFilter_id = _client_service().register_static_object(('TechlogDatabase', 'wellIsInFilter'))
    return _client_service().call(_wellIsInFilter_id, *args, **kwargs)


_wellList_id = None
def wellList(*args, **kwargs):
    """
    wellList() -> list
    
    Return the well list
    
    Returns:
        list: The list of the wells present in the 'filtered' project
    """
    global _wellList_id
    if _wellList_id is None:
        _wellList_id = _client_service().register_static_object(('TechlogDatabase', 'wellList'))
    return _client_service().call(_wellList_id, *args, **kwargs)


_wellMove_id = None
def wellMove(*args, **kwargs):
    """
    wellMove(w: str, databaseSource: str, databaseDestination: str) -> bool
    
    Move a well from a database to another one
    
    Args:
        w (str): well name
        databaseSource (str): database source = {'import', 'export', 'trash'}
        databaseDestination (str): database destination = {'import', 'export', 'trash'}
    
    Returns:
        bool: operation exit status
    """
    global _wellMove_id
    if _wellMove_id is None:
        _wellMove_id = _client_service().register_static_object(('TechlogDatabase', 'wellMove'))
    return _client_service().call(_wellMove_id, *args, **kwargs)


_wellPropertyChange_id = None
def wellPropertyChange(*args, **kwargs):
    """
    wellPropertyChange(wellName: str, propertyName: str, propertyValue: str, propertyUnit: str='', propertyDescription: str='') -> bool
    
    Create/change the specified well property
    
    Args:
        wellName (str): well name
        propertyName (str): property name
        propertyValue (str): property value
        propertyUnit (str): Optional; property unit
        propertyDescription (str): Optional; property description
    
    Returns:
        bool: operation exit status
    """
    global _wellPropertyChange_id
    if _wellPropertyChange_id is None:
        _wellPropertyChange_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyChange'))
    return _client_service().call(_wellPropertyChange_id, *args, **kwargs)


_wellPropertyDelete_id = None
def wellPropertyDelete(*args, **kwargs):
    """
    wellPropertyDelete(wellName: str, propertyName: str) -> bool
    
    Delete a well property
    
    Args:
        wellName (str): well name
        propertyName (str): property name
    
    Returns:
        bool: operation exit status
    """
    global _wellPropertyDelete_id
    if _wellPropertyDelete_id is None:
        _wellPropertyDelete_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyDelete'))
    return _client_service().call(_wellPropertyDelete_id, *args, **kwargs)


_wellPropertyDescription_id = None
def wellPropertyDescription(*args, **kwargs):
    """
    wellPropertyDescription(wellName: str, propertyName: str) -> str
    
    Return the well property description
    
    Args:
        wellName (str): well name
        propertyName (str): property name
    
    Returns:
        str: property description
    """
    global _wellPropertyDescription_id
    if _wellPropertyDescription_id is None:
        _wellPropertyDescription_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyDescription'))
    return _client_service().call(_wellPropertyDescription_id, *args, **kwargs)


_wellPropertyList_id = None
def wellPropertyList(*args, **kwargs):
    """
    wellPropertyList(wellName: str) -> list
    
    Return the list of well property names
    
    Args:
        wellName (str): well name
    
    Returns:
        list: property names list
    """
    global _wellPropertyList_id
    if _wellPropertyList_id is None:
        _wellPropertyList_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyList'))
    return _client_service().call(_wellPropertyList_id, *args, **kwargs)


_wellPropertyListChange_id = None
def wellPropertyListChange(*args, **kwargs):
    """
    wellPropertyListChange(wellName: str, propertyNameList: list, propertyValueList: list, propertyUnitList: list, propertyDescriptionList: list) -> bool
    
    Create/change the specified well property list
    
    Args:
        wellName (str): well name
        propertyNameList (list): property name list
        propertyValueList (list): property value list
        propertyUnitList (list): property unit list
        propertyDescriptionList (list): property description list
    
    Returns:
        bool: operation exit status
    """
    global _wellPropertyListChange_id
    if _wellPropertyListChange_id is None:
        _wellPropertyListChange_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyListChange'))
    return _client_service().call(_wellPropertyListChange_id, *args, **kwargs)


_wellPropertyUnit_id = None
def wellPropertyUnit(*args, **kwargs):
    """
    wellPropertyUnit(wellName: str, propertyName: str) -> str
    
    Return the well property unit
    
    Args:
        wellName (str): well name
        propertyName (str): property name
    
    Returns:
        str: property unit
    """
    global _wellPropertyUnit_id
    if _wellPropertyUnit_id is None:
        _wellPropertyUnit_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyUnit'))
    return _client_service().call(_wellPropertyUnit_id, *args, **kwargs)


_wellPropertyValue_id = None
def wellPropertyValue(*args, **kwargs):
    """
    wellPropertyValue(wellName: str, propertyName: str) -> str
    
    Return the well property value
    
    Args:
        wellName (str): well name
        propertyName (str): property name
    
    Returns:
        str: property value
    """
    global _wellPropertyValue_id
    if _wellPropertyValue_id is None:
        _wellPropertyValue_id = _client_service().register_static_object(('TechlogDatabase', 'wellPropertyValue'))
    return _client_service().call(_wellPropertyValue_id, *args, **kwargs)


_wellRename_id = None
def wellRename(*args, **kwargs):
    """
    wellRename(wellName: str, newWellName: str) -> bool
    
    Rename the well
    
    Args:
        wellName (str): well name
        newWellName (str): new well name
    
    Returns:
        bool: operation exit status
    """
    global _wellRename_id
    if _wellRename_id is None:
        _wellRename_id = _client_service().register_static_object(('TechlogDatabase', 'wellRename'))
    return _client_service().call(_wellRename_id, *args, **kwargs)


_workspacesClose_id = None
def workspacesClose(*args, **kwargs):
    """
    workspacesClose() -> bool
    
    Close all workspaces with no widget
    
    Returns:
        bool: operation exit status
    """
    global _workspacesClose_id
    if _workspacesClose_id is None:
        _workspacesClose_id = _client_service().register_static_object(('TechlogDatabase', 'workspacesClose'))
    return _client_service().call(_workspacesClose_id, *args, **kwargs)


_zonationAdd_id = None
def zonationAdd(*args, **kwargs):
    """
    zonationAdd(wellName: str, datasetZonation: str, family: str, unit: str) -> bool
    
    Add a zonation in a well
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
        family (str): family
        unit (str): unit
    
    Returns:
        bool: operation exit status
    """
    global _zonationAdd_id
    if _zonationAdd_id is None:
        _zonationAdd_id = _client_service().register_static_object(('TechlogDatabase', 'zonationAdd'))
    return _client_service().call(_zonationAdd_id, *args, **kwargs)


_zonationDelete_id = None
def zonationDelete(*args, **kwargs):
    """
    zonationDelete(wellName: str, datasetZonation: str, withProperties: bool=False) -> bool
    
    Delete a zonation in a well
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
        withProperties (bool): Optional; DEPRECATED
    
    Returns:
        bool: operation exit status
    """
    global _zonationDelete_id
    if _zonationDelete_id is None:
        _zonationDelete_id = _client_service().register_static_object(('TechlogDatabase', 'zonationDelete'))
    return _client_service().call(_zonationDelete_id, *args, **kwargs)


_zonationExists_id = None
def zonationExists(*args, **kwargs):
    """
    zonationExists(wellName: str, datasetZonation: str) -> bool
    
    Return True if zonation exists
    
    Args:
        wellName (str): well name
        datasetZonation (str): zonation dataset name
    
    Returns:
        bool: zonation dataset existence
    """
    global _zonationExists_id
    if _zonationExists_id is None:
        _zonationExists_id = _client_service().register_static_object(('TechlogDatabase', 'zonationExists'))
    return _client_service().call(_zonationExists_id, *args, **kwargs)


_zonationSave_id = None
def zonationSave(*args, **kwargs):
    """
    zonationSave(wellName: str, datasetZonation: str) -> bool
    
    Save a volatile zonation
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
    
    Returns:
        bool: operation exit status
    """
    global _zonationSave_id
    if _zonationSave_id is None:
        _zonationSave_id = _client_service().register_static_object(('TechlogDatabase', 'zonationSave'))
    return _client_service().call(_zonationSave_id, *args, **kwargs)


_zonationToMarker_id = None
def zonationToMarker(*args, **kwargs):
    """
    zonationToMarker(wellName: str, datasetZonation: str, datasetMarkerName: str, mode: int) -> bool
    
    Create a marker dataset from a zonation
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation source
        datasetMarkerName (str): new dataset marker name
        mode (int): 0=from top, 1=from bottom, 2=top and bottom
    
    Returns:
        bool: operation exit status
    """
    global _zonationToMarker_id
    if _zonationToMarker_id is None:
        _zonationToMarker_id = _client_service().register_static_object(('TechlogDatabase', 'zonationToMarker'))
    return _client_service().call(_zonationToMarker_id, *args, **kwargs)


_zoneAdd_id = None
def zoneAdd(*args, **kwargs):
    """
    zoneAdd(wellName: str, datasetZonation: str, zoneType: str, zone: str, top: float, bottom: float, color: str) -> bool
    
    Add a zone in a zonation
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
        zoneType (str): zone type
        zone (str): zone
        top (float): top
        bottom (float): bottom
        color (str): color (optional)
    
    Returns:
        bool: operation exit status
    """
    global _zoneAdd_id
    if _zoneAdd_id is None:
        _zoneAdd_id = _client_service().register_static_object(('TechlogDatabase', 'zoneAdd'))
    return _client_service().call(_zoneAdd_id, *args, **kwargs)


_zoneChangeColor_id = None
def zoneChangeColor(*args, **kwargs):
    """
    zoneChangeColor(zonation: str, zone: str, color: str) -> bool
    
    Change zone color
        zonation (str): zonation name
        zone (str): zone name
        color (str): zone color
    
    Returns:
        bool: operation exit status
    """
    global _zoneChangeColor_id
    if _zoneChangeColor_id is None:
        _zoneChangeColor_id = _client_service().register_static_object(('TechlogDatabase', 'zoneChangeColor'))
    return _client_service().call(_zoneChangeColor_id, *args, **kwargs)


_zoneChangeDescription_id = None
def zoneChangeDescription(*args, **kwargs):
    """
    zoneChangeDescription(zonation: str, zone: str, description: str) -> bool
    
    Change zone description
        zonation (str): zonation name
        zone (str): zone name
        description (str): description
    
    Returns:
        bool: operation exit status
    """
    global _zoneChangeDescription_id
    if _zoneChangeDescription_id is None:
        _zoneChangeDescription_id = _client_service().register_static_object(('TechlogDatabase', 'zoneChangeDescription'))
    return _client_service().call(_zoneChangeDescription_id, *args, **kwargs)


_zoneChangePattern_id = None
def zoneChangePattern(*args, **kwargs):
    """
    zoneChangePattern(zonationName: str, zoneName: str, project: str, pattern: str) -> bool
    
    Change zone pattern
        zonationName (str): zonation name
        zoneName (str): zone name
        project (str): project type. It can be {'techlog', 'project', 'user', 'company'}.
        pattern (str): pattern name
    
    Returns:
        bool: operation exit status
    """
    global _zoneChangePattern_id
    if _zoneChangePattern_id is None:
        _zoneChangePattern_id = _client_service().register_static_object(('TechlogDatabase', 'zoneChangePattern'))
    return _client_service().call(_zoneChangePattern_id, *args, **kwargs)


_zoneColor_id = None
def zoneColor(*args, **kwargs):
    """
    zoneColor(zonation: str, zone: str) -> str
    
    Get zone color
        zonation (str): zonation name
        zone (str): zone name
    
    Returns:
        str: color
    """
    global _zoneColor_id
    if _zoneColor_id is None:
        _zoneColor_id = _client_service().register_static_object(('TechlogDatabase', 'zoneColor'))
    return _client_service().call(_zoneColor_id, *args, **kwargs)


_zoneDelete_id = None
def zoneDelete(*args, **kwargs):
    """
    zoneDelete(wellName: str, datasetZonation: str, indice: int) -> bool
    
    Delete a zone in a zonation
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
        indice (int): indice
    
    Returns:
        bool: operation exit status
    """
    global _zoneDelete_id
    if _zoneDelete_id is None:
        _zoneDelete_id = _client_service().register_static_object(('TechlogDatabase', 'zoneDelete'))
    return _client_service().call(_zoneDelete_id, *args, **kwargs)


_zoneDescription_id = None
def zoneDescription(*args, **kwargs):
    """
    zoneDescription(zonation: str, zone: str) -> str
    
    Get zone description
        zonation (str): zonation name
        zone (str): zone name
    
    Returns:
        str: description
    """
    global _zoneDescription_id
    if _zoneDescription_id is None:
        _zoneDescription_id = _client_service().register_static_object(('TechlogDatabase', 'zoneDescription'))
    return _client_service().call(_zoneDescription_id, *args, **kwargs)


_zoneList_id = None
def zoneList(*args, **kwargs):
    """
    zoneList(wellName: str, datasetZonation: str, zoneFamily: str, family: str='', unit: str='', withInterzone: bool=False, contactDataset: str='', contactList: list=[]) -> bool
    
    Get top and bottom of a zone
    
    Args:
        wellName (str): well name
        datasetZonation (str): dataset zonation
        zoneFamily (str): zone family
        family (str): Optional; family name
        unit (str): Optional; unit name
        withInterzone (bool): Optional; with interzone
        contactDataset (str): Optional; contact dataset
        contactList (list): Optional; contact list
    
    Returns:
        bool: operation exit status
    """
    global _zoneList_id
    if _zoneList_id is None:
        _zoneList_id = _client_service().register_static_object(('TechlogDatabase', 'zoneList'))
    return _client_service().call(_zoneList_id, *args, **kwargs)


_zonePattern_id = None
def zonePattern(*args, **kwargs):
    """
    zonePattern(zonation: str, zone: str) -> list
    
    Get zone pattern
        zonation (str): zonation name
        zone (str): zone name
    
    Returns:
        list: project name, pattern name
    """
    global _zonePattern_id
    if _zonePattern_id is None:
        _zonePattern_id = _client_service().register_static_object(('TechlogDatabase', 'zonePattern'))
    return _client_service().call(_zonePattern_id, *args, **kwargs)


